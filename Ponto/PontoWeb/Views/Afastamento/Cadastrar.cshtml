@model Modelo.Afastamento
@{
    ViewBag.Title = "Cadastrar Afastamento";
    bool integrado = false;
    if (!String.IsNullOrEmpty(Model.IdIntegracao) && ViewBag.BloqueiaDadosIntegrados)
    {
        integrado = true;
    }
}
@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.Id, new { id = "idAfastamento" });
    @Html.HiddenFor(model => model.Incdata);
    @Html.HiddenFor(model => model.Inchora);
    @Html.HiddenFor(model => model.Incusuario);
    @Html.HiddenFor(model => model.Altdata);
    @Html.HiddenFor(model => model.Althora);
    @Html.HiddenFor(model => model.Altusuario);
    @Html.HiddenFor(model => model.Descricao);
    @Html.HiddenFor(model => model.IdOcorrencia);
    @Html.HiddenFor(model => model.IdFuncionario);
    @Html.HiddenFor(model => model.IdEmpresa);
    @Html.HiddenFor(model => model.IdDepartamento);
    @Html.HiddenFor(model => model.IdFuncionario_Ant);
    @Html.HiddenFor(model => model.IdDepartamento_Ant);
    @Html.HiddenFor(model => model.IdEmpresa_Ant);
    @Html.HiddenFor(model => model.Tipo_Ant);
    @Html.HiddenFor(model => model.Datai_Ant);
    @Html.HiddenFor(model => model.Dataf_Ant);
    @Html.HiddenFor(model => model.IdIntegracao);

    <div class="divCenterMedio">
        <div class="panel panel-default" style="padding:0">
            <div class="panel-heading salvando">
                @Html.ActionLink("X", "Grid", "Afastamento", null, new { @class = "close" })
                <h3 class="panel-title titulo-pagina">@ViewBag.Title</h3>
            </div>
            <div class="panel-body panelConteudo" id="panelBodyMaximo">
                @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessage("CustomError").ToHtmlString()))
                @if (!String.IsNullOrEmpty(@ViewBag.MensagemBloqueio))
                {
                    <div class="alert alert-info" role="alert" style="margin-bottom:0">@Html.Raw(ViewBag.MensagemBloqueio)</div>
                }
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.Codigo, new { @class = "control-label label-sm" })
                        @Html.TextBoxFor(model => model.Codigo, new { @class = "form-control  input-sm" }).IsReadonly(integrado)
                        @Html.ValidationMessageFor(model => model.Codigo)
                    </div>
                    <div class="col-md-3">
                        <div class="form-group input-group-sm">
                            @Html.LabelFor(model => model.Datai, new { @class = "control-label label-sm" })
                            <div class="input-group input-group-sm" onkeypress="dataKeypress('#Datai')">
                                @Html.TextBoxFor(model => model.Datai, new { @class = "form-control input-sm MascDate datepickerpt", id = "Datai" }).IsReadonly(integrado)
                                <span class="input-group-btn">
                                    <button class="btn btn-primary desabilitar" id="btnDataInicial" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Datai)
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group input-group-sm">
                            @Html.LabelFor(model => model.Dataf, new { @class = "control-label label-sm" })
                            <div class="input-group input-group-sm" onkeypress="dataKeypress('#Dataf')">
                                @Html.TextBoxFor(model => model.Dataf, new { @class = "form-control input-sm MascDate datepickerpt", id = "Dataf" }).IsReadonly(integrado)
                                <span class="input-group-btn">
                                    <button class="btn btn-primary desabilitar" id="btnDataFinal" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Dataf)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        @* Div do radio Tipo Afastamento*@
                        <div class="panel panel-default">
                            <div class="panel-heading" style="padding-top:1px; padding-bottom:0px">
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.Tipo, new { @class = "control-label label-sm" })
                                    </div>
                                    <div class="col-md-10" style="padding-right:0; padding-left:0">
                                        <div class="form-group input-group-sm">
                                            <div class="col-md-3 divempdep">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButtonFor(model => model.Tipo, 2, new { id = "idRadioEmpresa", name = "rdio" })
                                                    @Html.Label("lbEmpresa", "Empresa", new { @class = "control-label label-sm", @for = "idRadioEmpresa" })
                                                </div>
                                            </div>
                                            <div class="col-md-3 divempdep">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButtonFor(model => model.Tipo, 1, new { id = "idRadioDepartamento", name = "rdio" })
                                                    @Html.Label("lbDepartamento", "Departamento", new { @class = "control-label label-sm", @for = "idRadioDepartamento" })
                                                </div>
                                            </div>
                                            <div class="col-md-3 divcontrato">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButtonFor(model => model.Tipo, 3, new { id = "idRadioContrato", name = "rdio" })
                                                    @Html.Label("lbContrato", "Contrato", new { @class = "control-label label-sm", @for = "idRadioContrato" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButtonFor(model => model.Tipo, 0, new { id = "idRadioFuncionario", name = "rdio" })
                                                    @Html.Label("lbFuncionario", "Funcionário", new { @class = "control-label label-sm", @for = "idRadioFuncionario" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body" style="padding-top:0; padding-bottom:0px;">
                                <div id="divEmpresa" class="row divsTipo divempdep">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NomeEmpresa, new { @class = "control-label label-sm" })
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => model.NomeEmpresa, new { @class = "form-control  input-sm", id = "lkpEmpresa" }).IsReadonly(integrado)
                                                <span class="input-group-btn">
                                                    <button class="btn btn-primary desabilitar" id="btnEmpresa" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.NomeEmpresa)
                                        </div>
                                    </div>
                                </div>
                                <div id="divDepartamento" class="row divsTipo divempdep">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NomeDepartamento, new { @class = "control-label label-sm" })
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => model.NomeDepartamento, new { @class = "form-control  input-sm", id = "lkpDepartamento" }).IsReadonly(integrado)
                                                <span class="input-group-btn">
                                                    <button class="btn btn-primary desabilitar" id="btnDepartamento" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.NomeDepartamento)
                                        </div>
                                    </div>
                                </div>
                                <div id="divContrato" class="row divsTipo divcontrato">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NomeContrato, new { @class = "control-label label-sm" })
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => model.NomeContrato, new { @class = "form-control  input-sm", id = "lkpContrato" }).IsReadonly(integrado)
                                                <span class="input-group-btn">
                                                    <button class="btn btn-primary desabilitar" id="btnContrato" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.NomeContrato)
                                        </div>
                                    </div>
                                </div>
                                <div id="divFuncionario" class="row divsTipo">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NomeFuncionario, new { @class = "control-label label-sm" })
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => model.NomeFuncionario, new { @class = "form-control  input-sm", id = "lkpFuncionario" }).IsReadonly(integrado)
                                                <span class="input-group-btn">
                                                    <button class="btn btn-primary desabilitar" id="btnFuncionario" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.NomeFuncionario)
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="row" style="margin:0px; padding-bottom:0px;">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ocorrencia, new { @class = "control-label label-sm" })
                                <div class="input-group input-group-sm">
                                    @Html.TextBoxFor(model => model.ocorrencia, new { @class = "form-control  input-sm", id = "lkpOcorrencia" }).IsReadonly(integrado)
                                    <span class="input-group-btn">
                                        <button class="btn btn-primary desabilitar" id="btnOcorrencia" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.ocorrencia)
                            </div>
                        </div>
                        <div class="row" style="margin:0px; padding-bottom:0px;">
                            <div class="form-group">
                                <div>
                                    <div class="row">
                                        <div class="col-md-12" style="padding-right:0px;">
                                            @Html.LabelFor(model => model.Observacao, new { @class = "control-label label-sm" })
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <div class=" col-md-12">
                                        <div class="row">
                                            <div class="form-group input-group-sm">
                                                @Html.TextBoxFor(model => model.Observacao, new { @class = "form-control  input-sm" })
                                                @Html.ValidationMessageFor(model => model.Observacao)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding-top:0px; padding-bottom:0px;">
                            <div class="col-md-8" style="padding:0px;">
                                <div class="col-md-2" style="padding-top:0px; padding-bottom:0px;">
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor((model => model.BSemCalculo), new { id = "BSemCalculo", @class = "checkboxafast desabilitar" })
                                            @Html.LabelFor(model => model.BSemCalculo, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.BSemCalculo)
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding-top:0px; padding-bottom:0px;">
                                    <div class="checkbox" onclick="OcultarCheckContabilizarJornadaT()">
                                        <label>
                                            @Html.CheckBoxFor((model => model.BAbonado), new { id = "BAbonado", @class = "checkboxafast valorNecessario" })
                                            @Html.LabelFor(model => model.BAbonado, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.BAbonado)
                                        </label>
                                    </div>
                                    <div class="checkbox" id="rowcontabilizarjornada">
                                        <label>
                                            @Html.CheckBoxFor((model => model.Bcontabilizarjornada), new { id = "BcontabilizarjornadaBool", @class = "checkboxafast valorNecessario" })
                                            @Html.LabelFor(model => model.Bcontabilizarjornada, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.Bcontabilizarjornada)
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding-top:0px; padding-bottom:0px;">
                                    <div class="checkbox" onclick="OcultarCheckContabilizarJornadaT()">
                                        <label>
                                            @Html.CheckBoxFor((model => model.BParcial), new { id = "BParcial", @class = "checkboxafast valorNecessario" })
                                            @Html.LabelFor(model => model.BParcial, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.BParcial)
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding-top:0px; padding-bottom:0px;">
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor((model => model.bSuspensao), new { id = "bSuspensao", @class = "checkboxafast valorNecessario" })
                                            @Html.LabelFor(model => model.bSuspensao, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.bSuspensao)
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-3" style="padding-top:0px; padding-bottom:0px;">
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor((model => model.SemAbono), new { id = "SemAbono", @class = "checkboxafast valorNecessario" })
                                            @Html.LabelFor(model => model.SemAbono, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.SemAbono)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4" style="padding:0px;">
                                <div class="col-md-6" style="padding-top:8px; padding-bottom:0px; padding-left:0px; padding-right:0px;">
                                    @Html.LabelFor(model => model.Horai, new { @class = "control-label label-sm editor-label" })
                                    @Html.TextBoxFor(model => model.Horai, new { @class = "form-control  input-sm editor-field timeL valorNecessario", @placeholder = "--:--", id = "txtHoraI" })
                                    @Html.ValidationMessageFor(model => model.Horai)
                                </div>
                                <div class="col-md-6" style="padding-top:8px; padding-bottom:0px; padding-left:0px; padding-right:0px;">
                                    @Html.LabelFor(model => model.Horaf, new { @class = "control-label label-sm editor-label" })
                                    @Html.TextBoxFor(model => model.Horaf, new { @class = "form-control  input-sm editor-field timeL valorNecessario", @placeholder = "--:--", id = "txtHoraF" })
                                    @Html.ValidationMessageFor(model => model.Horaf)
                                </div>
                            </div>
                        </div>                        
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-12 center-block">
                        <div style="text-align: right">
                            <button type="submit" class="btn btn-success salvando desabilitar">
                                <span class="glyphicon glyphicon-ok-circle"></span> &nbsp;Salvar&nbsp;&nbsp;
                            </button>
                            <a class="btn btn-danger salvando"
                               href="@Url.Action("Grid", "Afastamento")">
                                <span class="glyphicon glyphicon-remove salvando"></span> Cancelar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script>

    function callbackocorrencias() {
        ocorrencia = $("#lkpOcorrencia").val();
        $.ajax({
            url: '/Afastamento/CarregaOcorrencia',
            type: 'GET',
            dataType: 'json',
            data: {
                'ocorrencia': ocorrencia
            },
            success: function (ret) {
                if (ret.Success === true) {
                    $(".checkboxafast").prop("checked", false);
                    $(".checkboxafast").prop("readonly", false);
                    $("#txtHoraI").val("");
                    $("#txtHoraI").prop('readonly', true);
                    $("#txtHoraF").val("");
                    $("#txtHoraF").prop('readonly', true);
                    switch (ret.DefaultTipoAfastamento) {
                        case 1:
                            if (ret.HorasAbonoPadrao != "" || ret.HorasAbonoPadraoNoturno != "") {
                                $('#BParcial').trigger('click');
                                $("#txtHoraI").val(ret.HorasAbonoPadrao);
                                $("#txtHoraF").val(ret.HorasAbonoPadraoNoturno);
                            }
                            else {
                                $('#BAbonado').trigger('click');
                            }
                            break;
                        case 2:
                            $('#BSemCalculo').trigger('click');
                            break;
                        case 3:
                            $('#bSuspensao').trigger('click');
                            break;
                        case 4:
                            $('#SemAbono').trigger('click');
                            break;
                    }
                } else {
                    cwkErroTit('Erro!', ret.Erro);
                }
            },
        });
    }

    $(document).ready(function () {
        $(":input[type='text']:enabled:visible:first").focus();
        if (Boolean('@ViewBag.DesabilitaCampos') == true) {
            $(':input').attr("disabled", true);
            $('.desabilitar').prop('disabled', true);
            $(document).click(function (evt) { evt.preventDefault; });
        }
        else {
            cwk_DataCalendario('#btnDataInicial', '#Datai');
            cwk_DataCalendario('#btnDataFinal', '#Dataf');
            cwk_EventoConsulta("#btnEmpresa", "#lkpEmpresa", "EventoConsulta", "Empresa", "");
            cwk_EventoConsulta("#btnDepartamento", "#lkpDepartamento", "EventoConsulta", "Departamento", "#lkpEmpresa");
            cwk_EventoConsulta("#btnFuncionario", "#lkpFuncionario", "EventoConsulta", "Funcionario", "");
            cwk_EventoConsulta("#btnContrato", "#lkpContrato", "EventoConsulta", "Contrato", "");
            cwk_EventoConsulta("#btnOcorrencia", "#lkpOcorrencia", "EventoConsulta", "Ocorrencia", "", callbackocorrencias);
            $('#divFuncionario').removeClass('hidden');
            $('#divContrato').addClass('hidden');
            $('#divEmpresa').addClass('hidden');
            $('#divDepartamento').addClass('hidden');
            validaTipo($('input:radio[name=Tipo]:checked').val());
        }

        if ('@ViewBag.UtilizaControleContratos'.toLowerCase() == 'true') {
            $('.divempdep').addClass('hidden');
        }
        if ('@ViewBag.EmpresaControleContratos'.toLowerCase() == 'false') {
            $('.divcontrato').addClass('hidden');
        }
        if ($("#BParcial").is(':unchecked'))
            {
            $("#txtHoraI").prop('readonly', true);
            $("#txtHoraI").val('--:--');
            $("#txtHoraF").prop('readonly', true);
            $("#txtHoraF").val('--:--');
        }
        OcultarCheckContabilizarJornadaT();
    });

    $("#lkpEmpresa").change(function () {
        $('#lkpDepartamento').val('');
    });

    $('input:radio[name=Tipo]').change(function () {
        validaTipo($(this).val());
    });


    function HabilitaDesabilitaComponente(componente, valor) {
        $(componente).prop("disabled", valor);
        $(componente).attr("disabled", valor);

        $(componente).prop("readonly", valor);
        $(componente).attr("readonly", valor);
    }

    function validaTipo(valor) {
        $("#lkpEmpresa").prop('disabled', false);
        $("#btnEmpresa").prop('disabled', false);
        $("#lkpDepartamento").prop('disabled', false);
        $("#btnDepartamento").prop('disabled', false);
        $("#lkpFuncionario").prop('disabled', false);
        $("#btnFuncionario").prop('disabled', false);
        switch (true) {
            case (valor == 0): // Funcionario
                $("#btnEmpresa").prop('disabled', true);
                $("#lkpEmpresa").prop('disabled', true);
                $("#lkpEmpresa").val('');
                $("#btnDepartamento").prop('disabled', true);
                $("#lkpDepartamento").prop('disabled', true);
                $("#lkpDepartamento").val('');
                $("#btnContrato").prop('disabled', true);
                $("#lkpContrato").prop('disabled', true);
                //$("#lkpContrato").val('');
                $('#divFuncionario').removeClass('hidden');
                $('#divContrato').addClass('hidden');
                $('#divEmpresa').addClass('hidden');
                $('#divDepartamento').addClass('hidden');
                break;
            case (valor == 1): // Departamento
                $("#btnFuncionario").prop('disabled', true);
                $("#lkpFuncionario").prop('disabled', true);
                $("#lkpFuncionario").val('');
                $("#btnContrato").prop('disabled', true);
                $("#lkpContrato").prop('disabled', true);
                //$("#lkpContrato").val('');
                $('#divContrato').addClass('hidden');
                $('#divFuncionario').addClass('hidden');
                $('#divEmpresa').removeClass('hidden');
                $('#divDepartamento').removeClass('hidden');
                break;
            case (valor == 2): // Empresa
                $("#btnFuncionario").prop('disabled', true);
                $("#lkpFuncionario").prop('disabled', true);
                $("#lkpFuncionario").val('');
                $("#btnDepartamento").prop('disabled', true);
                $("#lkpDepartamento").prop('disabled', true);
                $("#lkpDepartamento").val('');
                $("#btnContrato").prop('disabled', true);
                $("#lkpContrato").prop('disabled', true);
                //$("#lkpContrato").val('');
                $('#divContrato').addClass('hidden');
                $('#divFuncionario').addClass('hidden');
                $('#divEmpresa').removeClass('hidden');
                $('#divDepartamento').addClass('hidden');
                break;
            case (valor == 3): //Contrato
                $("#btnEmpresa").prop('disabled', true);
                $("#lkpEmpresa").prop('disabled', true);
                $("#lkpEmpresa").val('');
                $("#btnFuncionario").prop('disabled', true);
                $("#lkpFuncionario").prop('disabled', true);
                $("#lkpFuncionario").val('');
                $("#btnDepartamento").prop('disabled', true);
                $("#lkpDepartamento").prop('disabled', true);
                $("#lkpDepartamento").val('');
                $("#btnContrato").prop('disabled', false);
                $("#lkpContrato").prop('disabled', false);
                //$("#lkpContrato").val('');
                $('#divContrato').removeClass('hidden');
                $('#divFuncionario').addClass('hidden');
                $('#divEmpresa').addClass('hidden');
                $('#divDepartamento').addClass('hidden');
                break;
            default:
                break;
        }
    }


    $(".checkboxafast").click(function (event) {
        validaCheck(event);
    });

    function validaCheck(event) {
        var selecao = "";
        if (event) {
            selecao = event.target.id;
        }
        if ((selecao == "bSuspensao" || selecao == "")) {
            if ($("#bSuspensao").is(':checked')) {
                $("#SemAbono").prop("checked", false);
                $("#BSemCalculo").prop("checked", false);
                $("#BAbonado").prop("checked", false);
                $("#BParcial").prop("checked", false);
                $("#BAbonado").prop('disabled', false);
                $("#txtHoraI").prop('readonly', true);
                $("#txtHoraI").val('--:--');
                $("#txtHoraF").prop('readonly', true);
                $("#txtHoraF").val('--:--');
            }
        }
        else {
            if ((selecao == "BSemCalculo" || selecao == "") && $("#BSemCalculo").is(':checked')) {
                $("#SemAbono").prop("checked", false);
                $("#BAbonado").prop("checked", false);
                $("#BParcial").prop("checked", false);
                $("#BAbonado").prop('disabled', false);
                $("#bSuspensao").prop('checked', false);
                $("#txtHoraI").prop('readonly', true);
                $("#txtHoraI").val('');
                $("#txtHoraF").prop('readonly', true);
                $("#txtHoraF").val('');
            }
            else if ((selecao == "SemAbono" || selecao == "") && $("#SemAbono").is(':checked')) {
                $("#BSemCalculo").prop("checked", false);
                $("#BAbonado").prop("checked", false);
                $("#BParcial").prop("checked", false);
                $("#BAbonado").prop('disabled', false);
                $("#bSuspensao").prop('checked', false);
                $("#txtHoraI").prop('readonly', true);
                $("#txtHoraI").val('');
                $("#txtHoraF").prop('readonly', true);
                $("#txtHoraF").val('');
            }
            else {
                if ((selecao == "BParcial" || selecao == "") && $("#BParcial").is(':checked')) {
                    $("#SemAbono").prop("checked", false);
                    $("#BSemCalculo").prop("checked", false);
                    $("#BAbonado").prop("checked", true);
                    $("#BAbonado").prop('disabled', true);
                    $("#bSuspensao").prop('checked', false);
                    $("#txtHoraI").prop('readonly', false);
                    $("#txtHoraF").prop('readonly', false);
                }
                else {
                    if (((selecao == "BAbonado" || selecao == "") && $("#BAbonado").is(':checked')) || ((selecao == "BParcial" || selecao == "") && $("#BParcial").is(':unchecked'))) {
                        $("#SemAbono").prop("checked", false);
                        $("#BSemCalculo").prop("checked", false);
                        $("#BParcial").prop("checked", false);
                        $("#BAbonado").prop('disabled', false);
                        $("#bSuspensao").prop('checked', false);
                        $("#txtHoraI").prop('readonly', true);
                        $("#txtHoraI").val('--:--');
                        $("#txtHoraF").prop('readonly', true);
                        $("#txtHoraF").val('--:--');
                    }
                }
            }
        }

        $('form').submit(function () {
            $('.valorNecessario').prop('disabled', false);
        });
    }

    function OcultarCheckContabilizarJornadaT() {  
                if ($("#BAbonado").is(':checked') && (!$("#BParcial").is(':checked')))
                { $("#rowcontabilizarjornada").show(); }
                else {
                    $("#rowcontabilizarjornada").hide();
                    $("#BcontabilizarjornadaBool").prop("checked", false);                  
                }
    }    
    
</script>
@if (ViewBag.Consultar == 1 || !String.IsNullOrEmpty(@ViewBag.MensagemBloqueio))
{
    <script>
        $(document).ready(function () {
            $('form').find('input, textarea, button, select').attr('disabled', 'disabled');
        })
    </script>
}