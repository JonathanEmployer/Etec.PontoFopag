@model Modelo.Proxy.PxyIdPeriodo

@{
    Layout = null;
    ViewBag.Title = "Relatório Funcionários por Rep";
    Modelo.REP rep = (Modelo.REP)ViewBag.Rep;
    List<Modelo.Proxy.pxyFuncionarioRep> func = (List<Modelo.Proxy.pxyFuncionarioRep>)ViewBag.Func;
}

@using (Html.BeginForm("RelatorioFuncionariosRep", "RelatorioFuncionariosRep", FormMethod.Post, new { id = "FormRelatorioBilhetesRep", target = "_blank" }))
{
    @Html.AntiForgeryToken()
    <div class="divCenter">
        <div class="panel panel-default">
            <div class="panel-heading salvando">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true" id="xfecharCadastroModal">X</button>
                <h3 class="panel-title titulo-pagina">@ViewBag.Title</h3>
            </div>




            <div class="panel-body panelConteudo">
                <div class="row">&nbsp;</div>
                @Html.ValidationMessage("CustomError")
                @Html.HiddenFor(model => model.Id)
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.Label("Código", new { @class = "control-label" })
                            @Html.TextBox("Codigo", rep.Codigo, new { @class = "form-control", @disabled = true })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.Label("Número Série", new { @class = "control-label" })
                            @Html.TextBox("NumSerie", rep.NumSerie, new { @class = "form-control", @disabled = true })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.Label("Local", new { @class = "control-label" })
                            @Html.TextBox("Local", rep.Local, new { @class = "form-control", @disabled = true })
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.CheckBoxFor(model => rep.Operacao, new { @id = "Op" })
                            @Html.Label("Funcionários Excluidos", new { @class = "control-label" })
                        </div>

                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="row">
                                @Html.GridFor("tbFun", (new Modelo.Proxy.pxyFuncionarioRep()).GetType(), true, "RelatorioFuncionariosRep", "DadosFuncionario/" + rep.Id)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
}
<script>

    $("#Op").click(function () {
        let valOp = $("#Op:checked").val();
        let valIdRep = @rep.Id;
        let parametros = {
            idRep: valIdRep,
            op: valOp ? true : false
        };
        let url = "/RelatorioFuncionariosRep/AtualizaFuncionariosRep";

        return $.ajax({
            url: url,
            contentType: "application/json",
            type: 'GET',
            dataType: "html",
            data: parametros,
            cache: false,
            beforeSend: requestBeforeSend('Buscando dados'),
            error: function (e, xhr, settings) {
                alert(e);
                $.unblockUI();
            },
            success: function (result) {
                let funcDataArray = JSON.parse(result);
                EventoFuncionarioFiltroSuccess(funcDataArray);
                $.unblockUI();
            },
            complete: function (e, xhr, settings) {
                switch (e.status) {
                    case 500:
                        cwkErro('Erro interno!');
                        break;
                    case 404:
                        cwkErro('Página solicitada não foi encontrada!');
                        break;
                    case 401:
                        cwkErro('Acesso negado!');
                        break;
                }
            }
        });
    });
</script>