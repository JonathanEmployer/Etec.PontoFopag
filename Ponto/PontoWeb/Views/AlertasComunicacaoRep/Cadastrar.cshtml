@model Modelo.Alertas
@{
    ViewBag.Title = "Acompanhamento da Comunicação";
}

<style>
    .checkbox {
        margin-top: 5px;
        margin-bottom: 5px;
    }
</style>
@using (Html.BeginForm())
{
    <div>
        <div class="panel panel-default" style="padding:0; margin-bottom:0px">
            <div class="panel-heading salvando">
                @Html.ActionLink("X", "Grid", "AlertasComunicacaoRep", null, new { @class = "close" })
                <h3 class="panel-title titulo-pagina">@ViewBag.Title</h3>
            </div>
            <div class="panel-body  panelConteudo" id="panelBodyFixo">
                @Html.HiddenFor(m => m.Tipo)
                @Html.HiddenFor(m => m.DiasSemanaEnvio)
                @Html.HiddenFor(m => m.EmailIndividual)
                @Html.ValidationMessage("CustomError")
                <div class="row">
                    <div class="col-md-1">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Codigo, new { @class = "control-label label-sm" })
                            @Html.TextBoxFor(model => model.Codigo, new { @class = "form-control  input-sm" })
                            @Html.ValidationMessageFor(model => model.Codigo)
                        </div>
                    </div>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Descricao, new { @class = "control-label label-sm" })
                            @Html.TextBoxFor(model => model.Descricao, new { @class = "form-control  input-sm" })
                            @Html.ValidationMessageFor(model => model.Descricao)
                        </div>
                    </div>
                    <div class="col-md-1">
                    </div>
                    <div class="col-md-1">
                        @Html.LabelFor(model => model.Ativo, new { @class = "control-label label-sm" })
                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.Ativo)
                            @Html.ValidationMessageFor(model => model.Ativo)
                        </div>
                    </div>
                    <div class="col-md-2">
                        @Html.TextBoxForDateTime(m => m.UltimaExecucao)
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailUsuario, new { @class = "control-label label-sm" })
                            @Html.TextBoxFor(model => model.EmailUsuario, new { @class = "form-control  input-sm" })
                            @Html.ValidationMessageFor(model => model.EmailUsuario)
                        </div>
                    </div>
                    <div class="col-md-7">
                        <div class="panel panel-default" style="margin-bottom: 5px">
                            <div class="panel-heading">Verificação</div>
                            <div class="panel-body">
                                <div class="form-group form-inline">
                                    @Html.Label("Rep sem comunicação ou com falhas a mais de")
                                    @Html.TextBoxFor(model => model.IntervaloVerificacao, new { @class = "form-control  input-sm editor-field timeL limiteIntervalo", @style = "width:60px" })
                                    @Html.Label("(intervalo mínimo de 6 horas)")
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        @Html.HiddenFor(x => x.IdFuncsSelecionados)
                        @Html.HiddenFor(m => m.IdFuncsSelecionados_Ant)
                        @Html.ValidationMessageFor(x => x.IdFuncsSelecionados)
                        <div class="row">
                            @Html.GridFor("tbRep", new Modelo.REP().GetType(), true, "REP", "DadosGrid", "", "", Model.IdRepsSelecionados,"")
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-12 center-block">
                        <div style="text-align: right">
                            <button type="submit" class="btn btn-success salvando">
                                <span class="glyphicon glyphicon-ok-circle"></span> &nbsp;Salvar&nbsp;&nbsp;
                            </button>
                            <a class="btn btn-danger salvando"
                               href="@Url.Action("Grid", "AlertasComunicacaoRep")">
                                <span class="glyphicon glyphicon-remove"></span> Cancelar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script>
    var errorArray = new Array();
    $(":input[type='text']:enabled:visible:first").focus();
    $(document).ready(function () {
        lkpGenerico();
        $('#tbFun tbody').on('click', 'tr', function () {
            limpaErro("Pessoa");
        });
        //$('#UltimaExecucao').datetimepicker({
        //    locale: 'pt-BR'
        //});
        //$('#UltimaExecucao').datetimepicker({
        //    format: 'dd/MM/yyyy hh:mm:ss',
        //    language: 'en',
        //    pick12HourFormat: true
        //});
    })

    var mask = "HH:MM",
        pattern = {
            'translation': {
                'H': {
                    pattern: /[0-99]/
                },
                'M': {
                    pattern: /[0-59]/
                }
            }
        };

    $(".timeL").mask(mask, pattern);


    $(".timeL").blur(function () {
        var valor = formataHoraMin06($(this).val(), 2, 2);
        $(this).val(valor);
    })

    function formataHoraMin06(valor, digHora, digMin) {
        if (valor && valor.indexOf("-") == -1) {
            var tamanho = valor.length;
            var pos = valor.indexOf(":");
            if (pos == -1) { pos = tamanho }
            var horas = valor.substring(0, pos);
            var minutos = valor.substring(pos + 1, tamanho);
            if (parseInt(minutos) > 59) {
                minutos = parseInt(minutos) - 60;
                //minutos = 0;
                var horamaxima = lpad(9, digHora, 9);
                if (parseInt(horas) < horamaxima) {
                    horas = parseInt(horas) + 1;
                    if (horas < 6) {
                        horas = 6;
                        minutos = 0;
                    }
                }
                else {
                    minutos = 0;
                }
            }
            if (horas < 6) {
                horas = 6;
                minutos = 0;
            }
            horas = lpad(horas, digHora, 0);
            minutos = rpad(minutos, digMin, 0);
            valor = (horas + ":" + minutos);
        }
        return valor;
    }

    $('form').submit(function () {
        if ($(this).valid() && validaForm()) {
            return true;
        }
        return false;
    });

    function validaForm() {
        $("#IdFuncsSelecionados").val(tbFunGetSelecionado());
        if ($("#IdFuncsSelecionados").val() == null || $("#IdFuncsSelecionados").val() == '' || $("#IdFuncsSelecionados").val().length <= 0)
        {
            var msgErro = 'Selecionar um rep para ser monitorado pelo alerta';
            errorArray["Pessoa"] = msgErro;
            cwkErro(msgErro);
            $("form").validate().showErrors(errorArray);
            return false;
        }
        else {
            limpaErro("Pessoa");
            return true;
        }
    }
</script>
@if (ViewBag.Consultar == 1)
{
    <script>
        $(document).ready(function () {
            $('form').find('input, textarea, button, select').attr('disabled', 'disabled');
        })
    </script>
}

