@model Modelo.HorarioDinamico
@{
    ViewBag.Title = "Cadastrar Horário Dinâmico";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id, new { id = "idHorario", @class = "horario" })
    @Html.HiddenFor(model => model.Incdata, new { @class = "horario" })
    @Html.HiddenFor(model => model.Inchora, new { @class = "horario" })
    @Html.HiddenFor(model => model.Incusuario, new { @class = "horario" })
    @Html.HiddenFor(model => model.Altdata, new { @class = "horario" })
    @Html.HiddenFor(model => model.Althora, new { @class = "horario" })
    @Html.HiddenFor(model => model.Altusuario, new { @class = "horario" })
    @Html.HiddenFor(model => model.IdClassificacao, new { @class = "horario" })
    @Html.HiddenFor(model => model.PossuiFechamento, new { @class = "horario" })
    @Html.Hidden("InicioAdNoturno", (object)ViewBag.InicioAdNoturno, new { id = "InicioAdNoturno", @class = "horario" })
    @Html.Hidden("FimAdNoturno", (object)ViewBag.FimAdNoturno, new { id = "FimAdNoturno", @class = "horario" })
    <div class="divCenter">
        <div class="panel panel-default" style="padding-bottom:0; margin-bottom:0px;">
            <div class="panel-heading salvando">
                @Html.ActionLink("X", "Grid", "HorarioDinamico", null, new { @id = "btnCancelarX", @class = "close" })
                <h3 class="panel-title titulo-pagina">@ViewBag.Title</h3>
            </div>
            <div class="panel-body panelConteudo" id="panelBodyFixo" style="margin-top:0; padding-top:5px; padding-bottom:0; margin-bottom:0;">
                @Html.ValidationMessage("CustomError")
                @if (!String.IsNullOrEmpty(@ViewBag.MensagemBloqueio))
                {
                    <div class="alert alert-info" role="alert" style="margin-bottom:0">@Html.Raw(ViewBag.MensagemBloqueio)</div>
                }
                @*Tab Panel*@
                <div class="tabbable" style="margin-top:0;">
                    <ul class="nav nav-tabs" id="hnTab">
                        <li class="active"><a href="#pnlTurnoFlexivel" data-toggle="tab" id="liPnlTurnoFlexivel" style="padding:5px;">Turno</a></li>
                        <li><a href="#pnlParametros" data-toggle="tab" id="liPnlParametros" style="padding:5px;">Parâmetros</a></li>
                        <li><a href="#pnlDSR" data-toggle="tab" id="liPnlDSR" style="padding:5px;">DSR</a></li>
                        <li><a href="#pnlRestricoes" data-toggle="tab" id="liPnlRestricoes" style="padding:5px;">Restrições</a></li>
                    </ul>
                    <div class="tab-content" style="padding-top:5px;">
                        @*TAB Horario Dinâmico *@
                        <div class="tab-pane fade in active" id="pnlTurnoFlexivel">
                            <div class="row">
                                <div class="col-md-12" style="padding:0px;">
                                    <div class="col-md-6">
                                        <div class="row">
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Codigo, new { @class = "control-label label-sm" })
                                                    @Html.TextBoxFor(model => model.Codigo, new { @class = "form-control  input-sm horario" })
                                                    @Html.ValidationMessageFor(model => model.Codigo)
                                                </div>
                                            </div>
                                            <div class="col-md-10">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Descricao, new { @class = "control-label label-sm" })
                                                    @Html.TextBoxFor(model => model.Descricao, new { @class = "form-control  input-sm horario" })
                                                    @Html.ValidationMessageFor(model => model.Descricao)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-2">
                                                <div class="checkbox">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Ativo, new { @class = "checkboxHN horario", id = "chkInativarHorario" })
                                                        @Html.LabelFor(model => model.Ativo, new { @class = "control-label label-sm", @for = "chkInativarHorario" })
                                                        @Html.ValidationMessageFor(model => model.Ativo)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-10">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DescParametro, new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => model.DescParametro, new { @class = "form-control  input-sm lkpParametro horario", id = "lkpDescParametro" })
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-primary lkpParametro" id="btnDescParametro" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                        </span>
                                                    </div>
                                                    @Html.ValidationMessageFor(model => model.DescParametro)
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                    @*Componentes da Direita*@
                                    <div class="col-md-6">
                                        <div class="row">
                                            <div class="col-md-6">
                                                @Html.LabelFor(model => model.Limitemin, new { @class = "control-label label-sm editor-label" })
                                                @Html.TextBoxFor(model => model.Limitemin, new { @class = "form-control  input-sm editor-field timeL horario" })
                                                @Html.ValidationMessageFor(model => model.Limitemin)
                                            </div>
                                            <div class="col-md-6">
                                                @Html.LabelFor(model => model.Limitemax, new { @class = "control-label label-sm editor-label" })
                                                @Html.TextBoxFor(model => model.Limitemax, new { @class = "form-control  input-sm editor-field timeL horario" })
                                                @Html.ValidationMessageFor(model => model.Limitemax)
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.ConversaohoranoturnaBool, new { @class = "checkboxHN horario", id = "ConversaohoranoturnaBool" })
                                                        @Html.LabelFor(model => model.ConversaohoranoturnaBool, new { @class = "control-label label-sm", @for = "ConversaohoranoturnaBool" })
                                                        @Html.ValidationMessageFor(model => model.ConversaohoranoturnaBool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.OrdenabilhetesaidaBool, new { @class = "checkboxHN horario", id = "OrdenabilhetesaidaBool" })
                                                        @Html.LabelFor(model => model.OrdenabilhetesaidaBool, new { @class = "control-label label-sm", @for = "OrdenabilhetesaidaBool" })
                                                        @Html.ValidationMessageFor(model => model.OrdenabilhetesaidaBool)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.ConsideraadhtrabalhadasBool, new { @class = "checkboxHN horario", id = "ConsideraadhtrabalhadasBool" })
                                                        @Html.LabelFor(model => model.ConsideraadhtrabalhadasBool, new { @class = "control-label label-sm", id = "lbConsideraadhtrabalhadasBool", @for = "ConsideraadhtrabalhadasBool" })
                                                        @Html.ValidationMessageFor(model => model.ConsideraadhtrabalhadasBool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.IntervaloautomaticoBool, new { @class = "checkboxHN horario preassinalada", id = "IntervaloautomaticoBool" })
                                                        @Html.LabelFor(model => model.IntervaloautomaticoBool, new { @class = "control-label label-sm", @for = "IntervaloautomaticoBool" })
                                                        @Html.ValidationMessageFor(model => model.IntervaloautomaticoBool)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Ordem_entBool, new { @class = "checkboxHN horario", id = "Ordem_entBool" })
                                                        @Html.LabelFor(model => model.Ordem_entBool, new { @class = "control-label label-sm", @for = "Ordem_entBool" })
                                                        @Html.ValidationMessageFor(model => model.Ordem_entBool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="checkbox"  style="margin:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.PontoPorExcecao, new { @class = "checkboxHN horario", id = "PontoPorExcecaoBool" })
                                                        @Html.LabelFor(model => model.PontoPorExcecao, new { @class = "control-label label-sm", @for = "PontoPorExcecaoBool" })
                                                        @Html.ValidationMessageFor(model => model.PontoPorExcecao)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @*carga / ciclos *@
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.Label("lbCarga", "Carga", new { @class = "control-label label-sm" })
                                    <div class="panel panel-default">
                                        <div class="panel-body" style="padding-top:1px; padding-bottom:1px;">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    @Html.RadioButtonFor(m => m.Marcacargahorariamista, 0, new { @class = "horario", id = "rbNormal" })
                                                    @Html.Label("rbNormal", "Normal", new { @class = "control-label label-sm" })
                                                </div>
                                                <div class="col-md-6">
                                                    @Html.RadioButtonFor(m => m.Marcacargahorariamista, 1, new { @class = "horario", id = "rbMista" })
                                                    @Html.Label("rbMista", "Mista", new { @class = "control-label label-sm" })
                                                </div>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Marcacargahorariamista)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-1">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.QtdCiclo, new { @class = "control-label label-sm" })
                                        @Html.TextBoxFor(model => model.QtdCiclo, new { @class = "form-control  input-sm horario", @id = "Ciclos", @name = "Ciclos" })
                                        @Html.ValidationMessageFor(model => model.QtdCiclo)
                                    </div>
                                </div>
                                <div class="col-md-7"></div>
                            </div>

                            @*Horario dinamico ciclo *@
                            <div class="row ciclos"></div>
                            <ul class="contact-list"></ul>
                        </div>
                        @*TAB Parâmetros*@
                        <div class="tab-pane fade" id="pnlParametros">
                            <div class="col-md-7" style="padding:0px;">
                                <div class="panel panel-default" style="margin-bottom:5px;">
                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                        <div class="row">
                                            <div class="col-md-4">
                                                @Html.Label("Horas Extras em %", new { @class = "control-label label-sm" })
                                            </div>
                                            <div class="col-md-8">
                                                <div class="checkbox" style="margin:0;padding-top:5px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.SeparaExtraNoturnaPercentual, new { @class = "horario" })
                                                        @Html.LabelFor(model => model.SeparaExtraNoturnaPercentual, new { @class = "control-label label-sm horario " })
                                                        @Html.ValidationMessageFor(model => model.SeparaExtraNoturnaPercentual)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body" style="padding-top:5px;">
                                        @*Tipo Acumulo*@
                                        <div class="panel panel-default" style="margin-bottom:5px">
                                            <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                                @Html.LabelFor(model => model.Tipoacumulo, new { @class = "control-label label-sm" })
                                            </div>
                                            <div class="panel-body" style="padding-top:5px; padding-bottom:5px">
                                                <div class="col-md-4">
                                                    <div class="radio-inline" data-toggle="radio">
                                                        @Html.RadioButtonFor(model => model.Tipoacumulo, 1, new { id = "idRadioDiario", name = "rdio", @class = "horario" })
                                                        @Html.Label("lbDiario", "Diário", new { @class = "control-label label-sm", @for = "idRadioDiario" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="radio-inline" data-toggle="radio">
                                                        @Html.RadioButtonFor(model => model.Tipoacumulo, 2, new { id = "idRadioSemanal", name = "rdio", @class = "horario" })
                                                        @Html.Label("lbSemanal", "Semanal", new { @class = "control-label label-sm", @for = "idRadioSemanal" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="radio-inline" data-toggle="radio">
                                                        @Html.RadioButtonFor(model => model.Tipoacumulo, 3, new { id = "idRadioMensal", name = "rdio", @class = "horario" })
                                                        @Html.Label("lbMensal", "Mensal", new { @class = "control-label label-sm", @for = "idRadioMensal" })
                                                    </div>
                                                </div>
                                                <div class="col-md-12">
                                                    @Html.ValidationMessageFor(model => model.Tipoacumulo)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3"></div>
                                            <div class="col-md-9">
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="row separaPercentualNoturno">
                                                            <div class="col-md-12" style="text-align:center">
                                                                @Html.Label("", "Diurno", new { @class = "control-label label-sm" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6" style="text-align:center">
                                                                @Html.Label("", "Percentual", new { @class = "control-label label-sm" })
                                                            </div>
                                                            <div class="col-md-6" style="text-align:center">
                                                                @Html.Label("", "Limite", new { @class = "control-label label-sm" })
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-md-4 separaPercentualNoturno">
                                                        <div class="row">
                                                            <div class="col-md-12" style="text-align:center">
                                                                @Html.Label("", "Noturno", new { @class = "control-label label-sm" })
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6" style="text-align:center">
                                                                @Html.Label("", "Percentual", new { @class = "control-label label-sm" })
                                                            </div>
                                                            <div class="col-md-6" style="text-align:center">
                                                                @Html.Label("", "Limite", new { @class = "control-label label-sm" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-12" style="padding-top:5px;">
                                            @Html.EditorFor(model => model.LHorariosDinamicosPHExtra)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5" style="padding-right:0">
                                <div class="panel panel-default" style="margin-bottom:10px;">
                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                        @Html.Label("Intervalo de Café", new { @class = "control-label label-sm" })
                                    </div>
                                    <div class="panel-body" style="padding-top:5px;">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Habilitaperiodo01Bool, new { @class = "ckbIntervaloCafe horario", id = "Habilitaperiodo01Bool" })
                                                        @Html.LabelFor(model => model.Habilitaperiodo01Bool, new { @class = "control-label label-sm", @for = "Habilitaperiodo01Bool" })
                                                        @Html.ValidationMessageFor(model => model.Habilitaperiodo01Bool)
                                                    </label>
                                                </div>
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Habilitaperiodo02Bool, new { @class = "ckbIntervaloCafe horario", id = "Habilitaperiodo02Bool" })
                                                        @Html.LabelFor(model => model.Habilitaperiodo02Bool, new { @class = "control-label label-sm", @for = "Habilitaperiodo02Bool" })
                                                        @Html.ValidationMessageFor(model => model.Habilitaperiodo02Bool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.DescontacafemanhaBool, new { @class = "ckbIntervaloCafe horario", id = "DescontacafemanhaBool" })
                                                        @Html.LabelFor(model => model.DescontacafemanhaBool, new { @class = "control-label label-sm", @for = "DescontacafemanhaBool" })
                                                        @Html.ValidationMessageFor(model => model.DescontacafemanhaBool)
                                                    </label>
                                                </div>
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.DescontacafetardeBool, new { @class = "ckbIntervaloCafe horario", id = "DescontacafetardeBool" })
                                                        @Html.LabelFor(model => model.DescontacafetardeBool, new { @class = "control-label label-sm", @for = "DescontacafetardeBool" })
                                                        @Html.ValidationMessageFor(model => model.DescontacafetardeBool)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="panel panel-default">
                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                        @Html.Label("Dias para Intervalo de Café", new { @class = "control-label label-sm" })
                                    </div>
                                    <div class="panel-body" style="padding-top:5px;">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_1Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe1" })
                                                        @Html.LabelFor(model => model.Dias_cafe_1Bool, new { @class = "control-label label-sm", @for = "DiasCafe1" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_1Bool)
                                                    </label>
                                                </div>
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_5Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe5" })
                                                        @Html.LabelFor(model => model.Dias_cafe_5Bool, new { @class = "control-label label-sm", @for = "DiasCafe5" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_5Bool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="checkbox" style=" margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_2Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe2" })
                                                        @Html.LabelFor(model => model.Dias_cafe_2Bool, new { @class = "control-label label-sm", @for = "DiasCafe2" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_2Bool)
                                                    </label>
                                                </div>
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_6Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe6" })
                                                        @Html.LabelFor(model => model.Dias_cafe_6Bool, new { @class = "control-label label-sm", @for = "DiasCafe6" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_6Bool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="checkbox" style=" margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_3Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe3" })
                                                        @Html.LabelFor(model => model.Dias_cafe_3Bool, new { @class = "control-label label-sm", @for = "DiasCafe3" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_3Bool)
                                                    </label>
                                                </div>
                                                <div class="checkbox" style="margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_7Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe7" })
                                                        @Html.LabelFor(model => model.Dias_cafe_7Bool, new { @class = "control-label label-sm", @for = "DiasCafe7" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_7Bool)
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="checkbox" style=" margin:0px">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.Dias_cafe_4Bool, new { @class = "ckbIntervaloCafeDias horario", id = "DiasCafe4" })
                                                        @Html.LabelFor(model => model.Dias_cafe_4Bool, new { @class = "control-label label-sm", @for = "DiasCafe4" })
                                                        @Html.ValidationMessageFor(model => model.Dias_cafe_4Bool)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="checkbox style=">
                                            <label>
                                                @Html.CheckBoxFor(model => model.DesconsiderarFeriadoBool, new { id = "DesconsiderarFeriadoBool", @class = "horario" })
                                                @Html.LabelFor(model => model.DesconsiderarFeriadoBool, new { @class = "control-label label-sm", id = "DesconsiderarFeriado", title = "Quando selecionado este parâmetro, o feriado não será considerado no horário.", @for = "DesconsiderarFeriadoBool" })
                                                @Html.ValidationMessageFor(model => model.DesconsiderarFeriadoBool)
                                            </label>
                                        </div>
                                        <div class="checkbox style=">
                                            <label>
                                                @Html.CheckBoxFor(model => model.ConsiderasabadosemanaBool, new { id = "ConsiderasabadosemanaBool", @class = "horario" })
                                                @Html.LabelFor(model => model.ConsiderasabadosemanaBool, new { @class = "control-label label-sm", @for = "ConsiderasabadosemanaBool" })
                                                @Html.ValidationMessageFor(model => model.ConsiderasabadosemanaBool)
                                            </label>
                                        </div>
                                        <div class="checkbox">
                                            <label>
                                                @Html.CheckBoxFor(model => model.ConsideradomingosemanaBool, new { id = "ConsideradomingosemanaBool", @class = "horario" })
                                                @Html.LabelFor(model => model.ConsideradomingosemanaBool, new { @class = "control-label label-sm", @for = "ConsideradomingosemanaBool" })
                                                @Html.ValidationMessageFor(model => model.ConsideradomingosemanaBool)
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12" style="padding-right:0px; padding-left:0px;">
                                        <div class="col-md-5">
                                            @Html.LabelFor(model => model.LimiteHorasTrabalhadasDia, new { @class = "control-label label-sm", @for = "LimiteHorasTrabalhadasDia" })
                                            @Html.TextBoxFor(model => model.LimiteHorasTrabalhadasDia, new { @class = "form-control horario input-sm timeL", id = "LimiteHorasTrabalhadasDia", @placeholder = "10:00" })
                                            @Html.ValidationMessageFor(model => model.LimiteHorasTrabalhadasDia)
                                        </div>
                                        <div class="col-md-3">
                                            @Html.LabelFor(model => model.LimiteMinimoHorasAlmoco, new { @class = "control-label label-sm", @for = "LimiteMinimoHorasAlmoco" })
                                            @Html.TextBoxFor(model => model.LimiteMinimoHorasAlmoco, new { @class = "form-control horario input-sm timeL", id = "LimiteMinimoHorasAlmoco", @placeholder = "01:00" })
                                            @Html.ValidationMessageFor(model => model.LimiteMinimoHorasAlmoco)
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.LimiteInterjornada, new { @class = "control-label label-sm", @for = "txtLimiteInterjornada" })
                                            @Html.TextBoxFor(model => model.LimiteInterjornada, new { @class = "form-control horario input-sm timeL", id = "txtLimiteInterjornada", @placeholder = "11:00" })
                                            @Html.ValidationMessageFor(model => model.LimiteInterjornada)
                                        </div>
                                    </div>
                                </div>
                                <div class="panel panel-default" style=" margin-top:5px;">
                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:0;">
                                        @Html.Label("Tipo de Horário", new { @class = "control-label label-sm" })
                                    </div>
                                    <div class="panel-body">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group input-group-sm">
                                                    <div class="col-md-6">
                                                        <div class="radio" data-toggle="radio">
                                                            @Html.RadioButtonFor(model => model.HoristaMensalista, 0, new { @class = "horario" })
                                                            <label class="label-sm control-label" for="rdbMensalista">Mensalista</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="radio" data-toggle="radio">
                                                            @Html.RadioButtonFor(model => model.HoristaMensalista, 1, new { @class = "horario" })
                                                            <label class="label-sm control-label" for="rdbHorista">Horista</label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Obs, new { @class = "control-label label-sm" })
                                            @Html.TextAreaFor(model => model.Obs, new { @class = "form-control  input-sm horario" })
                                            @Html.ValidationMessageFor(model => model.Obs)
                                        </div>
                                    </div>
                                </div>
                                <div class="panel panel-default" style=" margin-top:5px;">
                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:0;">
                                        @Html.Label("Pré-classificacação Horas Extras", new { @class = "control-label label-sm" })
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.QtdHEPreClassificadas, new { @class = "control-label label-sm" })
                                                    @Html.TextBoxFor(model => model.QtdHEPreClassificadas, new { @class = "form-control input-sm timeL horario" })
                                                </div>
                                            </div>

                                            <div class="col-md-9">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DescClassificacao, new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => model.DescClassificacao, new { @class = "form-control input-sm lkpCodigoDescricaoClassificacao editor-field horario", id = "lkpCodigoDescricaoClassificacao" })
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-primary lkpCodigoDescricaoClassificacao" id="btnCodigoDescricaoClassificacao" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                        </span>
                                                    </div>
                                                    @Html.ValidationMessageFor(model => model.QtdHEPreClassificadas)
                                                    @Html.ValidationMessageFor(model => model.DescClassificacao)
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                        @*TAB DSR*@
                        <div class="tab-pane fade" id="pnlDSR">
                            @Html.HiddenFor(model => model.bUtilizaDDSRProporcional, new { id = "bUtilizaDDSRProporcional", @class = "horario" })
                            @Html.HiddenFor(model => model.DSRPorPercentual, new { id = "DSRPorPercentual", @class = "horario" })
                            <div class="col-md-8">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="checkbox">
                                            <label>
                                                @Html.CheckBoxFor(model => model.DescontardsrBool, new { id = "DescontardsrBool", @class = "horario" })
                                                @Html.LabelFor(model => model.DescontardsrBool, new { @class = "control-label label-sm", @for = "DescontardsrBool" })
                                                @Html.ValidationMessageFor(model => model.DescontardsrBool)
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="checkbox">
                                            <label>
                                                @Html.CheckBoxFor(model => model.DescontarFeriadoDDSR, new { id = "DesconsiderarFeriadoDDSR", @class = "horario" })
                                                @Html.LabelFor(model => model.DescontarFeriadoDDSR, new { @class = "control-label label-sm", @for = "DesconsiderarFeriadoDDSR" })
                                                @Html.ValidationMessageFor(model => model.DescontarFeriadoDDSR)
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        @Html.ValidationMessageFor(model => model.bUtilizaDDSRProporcional)
                                        @Html.ValidationMessageFor(model => model.DSRPorPercentual)
                                    </div>
                                </div>

                                <div class="panel panel-default" style="margin-bottom:5px">
                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:2px">
                                        <div class="row">
                                            <div class="col-md-2">
                                                @Html.Label("lbTipoDSR", "Tipo DSR", new { @class = "control-label label-sm" })
                                            </div>
                                            <div class="col-md-3">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButton("rTipoDSR", 1, new { id = "idRadioCLT", @class = "horario" })
                                                    @Html.Label("lbTipoDSRCLT", "Padrão CLT", new { @class = "control-label label-sm", @for = "idRadioCLT" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButton("rTipoDSR", 2, new { id = "idRadioProporcional", @class = "horario" })
                                                    @Html.Label("lbTipoDSRProporcional", "Proporcional", new { @class = "control-label label-sm", @for = "idRadioProporcional" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButton("rTipoDSR", 3, new { id = "idRadioPercentual", @class = "horario" })
                                                    @Html.Label("lbTipoDSRPercentual", "Percentual", new { @class = "control-label label-sm", @for = "idRadioPercentual" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body" style="padding-top:5px;">
                                        <div class="row" id="divddsrfixo">
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Qtdhorasdsr, new { @class = "control-label label-sm" })
                                                    @Html.TextBoxFor(model => model.Qtdhorasdsr, new { @class = "form-control  input-sm timeL horario", id = "Qtdhorasdsr" })
                                                    @Html.ValidationMessageFor(model => model.Qtdhorasdsr)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Limiteperdadsr, new { @class = "control-label label-sm" })
                                                    @Html.TextBoxFor(model => model.Limiteperdadsr, new { @class = "form-control  input-sm timeL horario", id = "Limiteperdadsr" })
                                                    @Html.ValidationMessageFor(model => model.Limiteperdadsr)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="checkbox">
                                                    <label>
                                                        @Html.CheckBoxFor(model => model.DDSRConsideraFaltaDuranteSemana, new { id = "DDSRConsideraFaltaDuranteSemana", @class = "horario" })
                                                        @Html.LabelFor(model => model.DDSRConsideraFaltaDuranteSemana, new { @class = "control-label label-sm", @for = "DDSRConsideraFaltaDuranteSemana" })
                                                        @Html.ValidationMessageFor(model => model.DDSRConsideraFaltaDuranteSemana)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row" id="divDescontohorasdsr">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Descontohorasdsr, new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => model.Descontohorasdsr, new { @class = "form-control input-sm decimalPercent horario", id = "Descontohorasdsr", aria_describedby = "basic-addon2" })
                                                        <span class="input-group-addon" id="basic-addon2">%</span>
                                                    </div>

                                                    @Html.ValidationMessageFor(model => model.Descontohorasdsr)
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row" id="divddsrprop">
                                            <div class="col-md-12">
                                                <div class="panel panel-default">
                                                    <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                                        @Html.LabelFor(model => model.LimitesDDsrProporcionais, new { @class = "control-label label-sm" })
                                                    </div>
                                                    <div class="panel-body" style="padding-top:5px; padding-bottom:5px">
                                                        <div class="row">
                                                            @Html.ValidationMessageFor(model => model.LimitesDDsrProporcionais)
                                                        </div>
                                                        <div class="row">
                                                            <div id="limitesDDSR">
                                                                @Html.EditorFor(model => model.LimitesDDsrProporcionais)
                                                            </div>
                                                        </div>
                                                        <div class="row" style="padding-top:10px; text-align:right;">
                                                            @Html.LinkToAddNestedForm("Adicionar", "#limitesDDSR", ".limiteDDSR", "LimitesDDsrProporcionais",
                                                                typeof(Modelo.LimiteDDsr), "Codigo", null)
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @*TAB Restrições*@
                        <div class="tab-pane fade" id="pnlRestricoes">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <div class="row">
                                        <div class="col-md-1">
                                            @Html.Label("Tipo", new { @class = "control-label label-sm" })
                                        </div>
                                        <div class="col-md-11">
                                            <div class="row">
                                                <div class="form-group input-group-sm">
                                                    <div class="col-md-3">
                                                        <div class="radio-inline" data-toggle="radio">
                                                            @Html.RadioButton("TipoRestricao", 0, new { id = "idTipoRestricaoEmpresa", @class = "radioRestricao", @checked = true })
                                                            @Html.Label("lbRestricaoEmpresa", "Empresa", new { @class = "control-label label-sm", @for = "idTipoRestricaoEmpresa" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="radio-inline" data-toggle="radio">
                                                            @Html.RadioButton("TipoRestricao", 1, new { id = "idTipoRestricaoContrato", @class = "radioRestricao" })
                                                            @Html.Label("lbRestricaoContrato", "Contrato", new { @class = "control-label label-sm", @for = "idTipoRestricaoContrato" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="panel-body">
                                    <div class="col-md-10">
                                        <div id="divEmpresa">
                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    @Html.Label("Empresa", new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBox("Empresa", "", new { @class = "form-control  input-sm", id = "lkpEmpresa" })
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-primary" id="btnEmpresa" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="divContrato" hidden>
                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    @Html.Label("Contrato", new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBox("Contrato", "", new { @class = "form-control  input-sm", id = "lkpContrato" })
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-primary" id="btnContrato" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <br />
                                        <button type="button" id="btnInserirNovaRestricao" class="btn btn-sm btn-success"><span class="glyphicon glyphicon-plus"></span></button>
                                    </div>
                                </div>
                            </div>
                            <div class="panel panel-default">
                                <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                    @Html.Label("", "Restrições", new { @class = "control-label label-sm" })
                                </div>
                                <div class="panel-body" style="padding-top:5px; padding-bottom:5px">
                                    <table id="tbRestricao" class="table table-bordered table-condensed">
                                        <thead>
                                            <tr>
                                                <th>Tipo</th>
                                                <th>Descrição</th>
                                                <th>Opções</th>
                                            </tr>
                                        </thead>
                                        <tbody id="divRestricoes">
                                            @for (int i = 0; i < Model.HorarioDinamicoRestricao.Count; i++)
                                            {
                                                @Html.EditorFor(m => Model.HorarioDinamicoRestricao[i], "Restricoes")
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-12 center-block">
                        <div style="text-align: right">
                            <button type="submit" class="btn btn-success btn-sm salvando" id="btnSalvarHorarioFlexivel">
                                <span class="glyphicon glyphicon-ok-circle"></span> &nbsp;Salvar&nbsp;&nbsp;
                            </button>
                            <a class="btn btn-danger btn-sm salvando" id="btnCancelar"
                               href="@Url.Action("Grid", "HorarioDinamico")">
                                <span class="glyphicon glyphicon-remove salvando"></span> Cancelar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


}
<style>
    .tabela_sequencia ul {
        list-style-type: none;
    }

        .tabela_sequencia ul li {
            height: 23px;
        }

    .div_chk_seq {
        padding-top: 1px;
    }

    .tabela_sequencia ul input {
        margin: 0;
    }

    .seq_error {
        border: 1px solid #b94a48;
        border-radius: 3px;
    }
</style>
<script>
    // Tratar incompatibilidade do navegador Edge com a função forEach
    if (typeof Array.prototype.forEach != 'function') {
	Array.prototype.forEach = function (callback) {
		for (var i = 0; i < this.length; i++) {
			callback.apply(this, [this[i], i, this]);
		}
	 };
	}

	if (window.NodeList && !NodeList.prototype.forEach) {
		NodeList.prototype.forEach = Array.prototype.forEach;
    }
    // Fim tratar incompatibilidade do navegador Edge com a função forEach

    (function ($) {
        $.fn.updateValidation = function () {
            var $this = $(this);
            var form = $this.closest("form").removeData("validator").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
            return $this;
        };
    })(jQuery);

    var _consultar, _msgBloqueio, _retController, _retAcao, _inicioAdNoturno, _fimAdNoturno = undefined;
    _initializarViewBag();
    //var errorArray = new Array();
    $(document).ready(function ()
    {
        loadConvertDadosDSR();
        JsonToHtml();
        configurarCampos();
    });

/*EVENTOS -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    $(".lkpCodigoDescricaoClassificacao").bind("keydown click", function (e) {
        cwk_EventoConsultaUnico(e, this, "", "Classificacao", "", "");
        limpaErro($('#lkpCodigoDescricaoClassificacao').attr('name'));
    });
    $(".lkpJornada, .lkpJornadaManut").bind("keydown click", function (e) {
        cwk_EventoConsultaUnico(e, this, "", "Jornada", "", "");
    });
    $(".lkpJornada").blur("keydown click", function (e) {
        preencheIntervalo("#lkpJornada");
        validaIntervaloAutomatico();
    });
    $(".lkpJornadaManut").blur("keydown click", function (e) {
        addErroInput("lkpJornadaManut", "");
        limpaErro("lkpJornadaManut");
        ValidaJornadaObrigatoria();
        preencheIntervaloManut("#lkpJornadaManut");
        validaIntervaloAutomaticoManut();
    });
    $('#ckbHorasNormaisBool').click(function () {
        if ($("#ckbHorasNormaisBool").is(':checked')) {
            $("#ckbHorasMistaBool").prop("checked", false);
        }
        else {
            $("#ckbHorasMistaBool").prop("checked", true);
        }
        calcHoras();
    });
    $('#ManutCkbHorasNormais').click(function () {
        if ($("#ManutCkbHorasNormais").is(':checked')) {
            $("#ManutCkbHorasMista").prop("checked", false);
        }
        else {
            $("#ManutCkbHorasMista").prop("checked", true);
        }
        calcHorasManut();
    });
    $('#ckbHorasMistaBool').click(function () {
        if ($("#ckbHorasMistaBool").is(':checked')) {
            $("#ckbHorasNormaisBool").prop("checked", false);
        }
        else {
            $("#ckbHorasNormaisBool").prop("checked", true);
        }
        calcHoras();
    });
    $('#ManutCkbHorasMista').click(function () {
        if ($("#ManutCkbHorasMista").is(':checked')) {
            $("#ManutCkbHorasNormais").prop("checked", false);
        }
        else {
            $("#ManutCkbHorasNormais").prop("checked", true);
        }
        calcHorasManut();
    });
    $(".lkpParametro").bind("keydown click", function (e) {
        cwk_EventoConsultaUnico(e, this, "", "Parametro", "", callBackParam);
    });

    $("#CkbIntervaloAutomaticoManut").click(function (event) {
        validaIntervaloAutomaticoManut();
    });
    $("#ConversaohoranoturnaBool").click(function (e) {
        checkConversaoHoraNoturna();
    });
    $(".ckbMarcaPercentualExtra").click(function (event) {
        validackbMarcaPercentualExtra(event);
    });
    $("#ConsiderasabadosemanaBool").click(function (event) {
        validackbMarcaPercentualExtra();
    });
    $("#ConsideradomingosemanaBool").click(function (event) {
        validackbMarcaPercentualExtra();
    });
    $("#Habilitaperiodo01Bool").click(function (event) {
        if ($(this).is(':checked')) {
            $("#DescontacafemanhaBool").prop("checked", false);
        }
    });
    $("#DescontacafemanhaBool").click(function (event) {
        if ($(this).is(':checked')) {
            $("#Habilitaperiodo01Bool").prop("checked", false);
        }
    });
    $("#Habilitaperiodo02Bool").click(function (event) {
        if ($(this).is(':checked')) {
            $("#DescontacafetardeBool").prop("checked", false);
        }
    });
    $("#DescontacafetardeBool").click(function (event) {
        if ($(this).is(':checked')) {
            $("#Habilitaperiodo02Bool").prop("checked", false);
        }
    });

    $("#DescontardsrBool").click(function (event) {
        if ($(this).is(':checked')) {
            var $radios = $('input:radio[name=rTipoDSR]');
            if ($radios.is(':checked') === false) {
                $radios.filter('[value=1]').prop('checked', true);
            }

        } else {
            $('input:radio[name=rTipoDSR]').prop('checked', false);
        }

        validaDSR();
    });

    $('input:radio[name=rTipoDSR]').change(function () {
        validaDSR();
    });

    $("#btnDivManutHorarioCancelar").click(function () { $("#btnDivManutHorarioFechar").trigger("click"); });
    $('#CkbFolgManut').click(function () {
        addErroInput("lkpJornadaManut", "");
        limpaErro("lkpJornadaManut");
        if ($("#CkbFolgManut").is(':checked')) {
            $("#lkpJornadaManut").prop("disabled", true);
            $("#btnlkpJornadaManut").prop("disabled", true);
            $("#lkpJornadaManut").val("");
            $("#ManutTxt_e1").val("--:--");
            $("#ManutTxt_e2").val("--:--");
            $("#ManutTxt_e3").val("--:--");
            $("#ManutTxt_e4").val("--:--");
            $("#ManutTxt_s1").val("--:--");
            $("#ManutTxt_s2").val("--:--");
            $("#ManutTxt_s3").val("--:--");
            $("#ManutTxt_s4").val("--:--");
        }
        else {
            $("#lkpJornadaManut").prop("disabled", false);
            $("#btnlkpJornadaManut").prop("disabled", false);
        }
        validaIntervaloAutomaticoManut();
        calcHorasManut();
    });
    $("#btnDivManutHorarioSalvar").click(function ()
    {
        var valido = true;
        ValidaJornadaObrigatoria();
        var idJornada = 0;
        $("#divManutHorario").find('input:text, input:password, input:file, select, textarea')
                .each(function () {
                    if ($(this).hasClass("input-validation-error")) {
                        valido = false;
                    }
                });
        if (valido) {
            if ($("#CkbFolgManut").is(':unchecked')) {
                $.ajax({
                    url: '/Horario/ValidaJornada',
                    type: 'POST',
                    data: { jornada: $('#lkpJornadaManut').val(), __RequestVerificationToken: gettoken() },
                    success: function (result) {
                        if (result.erro) {
                            addErroInput("lkpJornadaManut", result.msgErro + "  ");
                            valido = false;
                        }
                        else {
                            if ($('#lkpJornadaManut').val() != result.descJornada) {
                                $('#lkpJornadaManut').val(result.descJornada);
                                preencheIntervaloManut("#lkpJornadaManut");
                                validaIntervaloAutomaticoManut();
                            }
                            valido = true;
                            idJornada = result.idJornada;
                        }
                    }
                });
            }
        }
    });
    $('#SeparaExtraNoturnaPercentual').change(function () {
        MostrarSeparacaoPercentualHoraExtraNoturna(this.checked);
    });
/*FUNCTIONS -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    //CONFIGURAÇÃO INICIAL DOS CAMPOS
    function configurarCampos()
    {
        validackbMarcaPercentualExtra();
        validaDSR();
        checkConversaoHoraNoturna();
        MostrarSeparacaoPercentualHoraExtraNoturna($('#SeparaExtraNoturnaPercentual').is(':checked'));

        confDatePicker();
        confCalendario();

        $('.timeJornada').attr('readonly', 'readonly');
        $('.timeTotalizador').attr('readonly', 'readonly');
        $('.ManutTimeJornada').attr('readonly', 'readonly');
        $('.ManutTimeTotalizador').attr('readonly', 'readonly');
        regraHoras();
        regraHorasManut();
        $(":input[type='text']:enabled:visible:first").focus();
        $('[id="DesconsiderarFeriado"]').tooltip({ placement: 'top' });
        validarSolicitacaoBloqueio();
        confButtonModal();
    }
    function confDatePicker()
    {
        setaDatePiker('#DataInicial');
        setaDatePiker('#DataFinal');
        setaDatePiker('#DataManut');
    }
    function confCalendario() {
        cwk_DataCalendario('#btnDataInicial', '#DataInicial');
        cwk_DataCalendario('#btnDataFinal', '#DataFinal');
        cwk_DataCalendario('#btnDataManut', '#DataManut');
    }

    function removeNestedForm(element, container, deleteElement) {
        $container = $(element).parents(container);
        $container.find(deleteElement).val('True');
        $container.hide();
    }
    function addNestedForm(container, counter, ticks, content, optionalIndex) {
        var nextIndex = $(counter).length;
        var pattern = new RegExp(ticks, "gi");
        content = content.replace(pattern, nextIndex);
        $(container).append(content);
        corrigeDatePicker();
        $(container).find('input:visible:last').focus();
    }
    function regraHoras() {
        if ($("#ckbHorasNormaisBool").is(':checked')) {
            $("#ckbHorasMistaBool").prop("checked", false);
        }
        else {
            $("#ckbHorasNormaisBool").prop("checked", false);
        }
        calcHoras();
    }
    function regraHorasManut() {
        if ($("#ManutCkbHorasNormais").is(':checked')) {
            $("#ManutCkbHorasMista").prop("checked", false);
        }
        else {
            $("#ManutCkbHorasNormais").prop("checked", false);
        }
        calcHorasManut();
    }
    function calcHoras() {
        var entradas = new Array();
        var saidas = new Array();
        $('.timeJornadaE').toArray().forEach(function (item, index, array) {
            entradas.push(ConvertHoraMinuto(item.value));
        });
        $('.timeJornadaS').toArray().forEach(function (item, index, array) {
            saidas.push(ConvertHoraMinuto(item.value));
        });
        var tipoHorario = 0;

        if ($('#ckbHorasNormaisBool').is(':checked'))
            tipoHorario = 1;
        else
            tipoHorario = 2;

        var resultado = CalculaCargaHoraria(entradas, saidas,
            ConvertHoraMinuto(_inicioAdNoturno),
            ConvertHoraMinuto(_fimAdNoturno),
            tipoHorario,
            false, false, false);

        var valor = $.trim(ConvertMinutoHora(resultado.horasTrabalhadasDiurnas, 2));
        if (valor == "" || valor == null || valor == undefined)
            valor = "--:--";
        $('#CargaDiurna').val(valor);

        valor = $.trim(ConvertMinutoHora(resultado.horasTrabalhadasNoturnas, 2));
        if (valor == "" || valor == null || valor == undefined)
            valor = "--:--";
        $('#CargaNoturna').val(valor);

        valor = $.trim(ConvertMinutoHora(resultado.horasTrabalhadasMista, 2));
        if (valor == "" || valor == null || valor == undefined)
            valor = "--:--";
        $('#txtTotalMista').val(valor);
    }
    function calcHorasManut() {
        var entradas = new Array();
        var saidas = new Array();
        $('.ManutTimeJornadaE').toArray().forEach(function (item, index, array) {
            entradas.push(ConvertHoraMinuto(item.value));
        });
        $('.ManutTimeJornadaS').toArray().forEach(function (item, index, array) {
            saidas.push(ConvertHoraMinuto(item.value));
        });
        var tipoHorario = 0;

        if ($('#ManutCkbHorasNormais').is(':checked'))
            tipoHorario = 1;
        else
            tipoHorario = 2;

        var resultado = CalculaCargaHoraria(entradas, saidas,
            ConvertHoraMinuto(_inicioAdNoturno),
            ConvertHoraMinuto(_fimAdNoturno),
            tipoHorario,
            false, false, false);

        var valor = $.trim(ConvertMinutoHora(resultado.horasTrabalhadasDiurnas, 2));
        if (valor == "" || valor == null || valor == undefined) { valor = "--:--"; }
        $('#ManutCargaDiurna').val(valor);

        valor = $.trim(ConvertMinutoHora(resultado.horasTrabalhadasNoturnas, 2));
        if (valor == "" || valor == null || valor == undefined) { valor = "--:--"; }
        $('#ManutCargaNoturna').val(valor);

        valor = $.trim(ConvertMinutoHora(resultado.horasTrabalhadasMista, 2));
        if (valor == "" || valor == null || valor == undefined) { valor = "--:--"; }
        $('#ManutTxtTotalMista').val(valor);
    }
    function callBackParam() {
        $.ajax({
            url: '/Horario/DadosParametros',
            type: 'POST',
            data: { parametro: $('#lkpDescParametro').val(), __RequestVerificationToken: gettoken() },
            success: function (result) {
                $("#InicioAdNoturno").val(result.inicioAdNoturno);
                $("#FimAdNoturno").val(result.fimAdNoturno);
            }
        });
    };
    function validaIntervaloAutomaticoManut() {
        if ($("#CkbIntervaloAutomaticoManut").is(':checked')) {
            if (($('#ManutTxt_s1').val() != '' && $('#ManutTxt_s1').val() != '--:--') && ($('#ManutTxt_e2').val() != '' && $('#ManutTxt_e2').val() != '--:--')) {
                $("#ManutChk_pa1").attr('disabled', false);
                $("#ManutChk_pa1").removeAttr("readonly");
            }
            else {
                $("#ManutChk_pa1").attr("disabled", true);
                $("#ManutChk_pa1").prop("checked", false);
            }

            if (($('#ManutTxt_s2').val() != '' && $('#ManutTxt_s2').val() != '--:--') && ($('#ManutTxt_e3').val() != '' && $('#ManutTxt_e3').val() != '--:--')) {
                $("#ManutChk_pa2").attr('disabled', false);
                $("#ManutChk_pa2").removeAttr("readonly");
            }
            else {
                $("#ManutChk_pa2").attr("disabled", true);
                $("#ManutChk_pa2").prop("checked", false);
            }

            if (($('#ManutTxt_s3').val() != '' && $('#ManutTxt_s3').val() != '--:--') && ($('#ManutTxt_e4').val() != '' && $('#ManutTxt_e4').val() != '--:--')) {
                $("#ManutChk_pa3").attr('disabled', false);
                $("#ManutChk_pa3").removeAttr("readonly");
            }
            else {
                $("#ManutChk_pa3").attr("disabled", true);
                $("#ManutChk_pa3").prop("checked", false);
            }
        }
        else {
            $('.ManutChk_pa').attr("disabled", true);
            $('.ManutChk_pa').prop("checked", false);
        }
    }
    function checkConversaoHoraNoturna() {
        if ($("#ConversaohoranoturnaBool").is(':checked')) {
            $("#ConsideraadhtrabalhadasBool").prop("disabled", false)
        }
        else {
            $("#ConsideraadhtrabalhadasBool").prop("disabled", true);
            $("#ConsideraadhtrabalhadasBool").prop("checked", false);
        }
    }

    function ValidaJornadaObrigatoria() {
        if (!($("#lkpJornadaManut").val() != null && $("#lkpJornadaManut").val() != "" && $("#lkpJornadaManut").val() != undefined) && ($("#CkbFolgManut").is(':unchecked'))) {
            addErroInput("lkpJornadaManut", "Campo Jornada Obrigatório!!!");
        }
    }

    //Adiciona erro em um input
    //Passar a propriedade name do input e o erro que deseja add.
    function addErroInput(key, erro) {

        //remove os campos com erro
        //$('form').find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");

        $val = $('form').find(".field-validation-valid, .field-validation-error")
            .filter("[data-valmsg-for='" + key + "']")
            .removeClass("field-validation-valid")
            .addClass("field-validation-error");

        $input = $('form').find("*[name='" + key + "']");

        if (!$input.is(":hidden") && !$val.length) {
            $input.parent().append("<span class='field-validation-error' data-valmsg-for='" + key + "' data-valmsg-replace='false'> " + erro.substr(0, erro.length - 2) + "</span>");
        }
        else {
            $val.text(erro.substr(0, erro.length - 2));
        }

        $input.addClass("input-validation-error");
    }

    function validackbMarcaPercentualExtra(event) {
        var selecao = "";
        if (event) {
            selecao = event.target.id;
        }

        if ($("#ConsiderasabadosemanaBool").is(':checked')) {
            $("#ckbMarcaPercentualExtra6").prop("checked", false);
            $("#ckbMarcaPercentualExtra6").prop('disabled', true);
        }
        else {
            $("#ckbMarcaPercentualExtra6").prop('disabled', false);
        }

        $(".ckbMarcaPercentualExtra").each(function () {
            var ckbDia = this.id;
            var vdia = ckbDia.replace("ckbMarcaPercentualExtra", "");
            if ($(this).is(':checked')) {
                habilitaHorasExtras(vdia);
            }
            else {
                desabilitaHorasExtras(vdia);
            }

            if ($("#ConsideradomingosemanaBool").is(':checked')) {
                $("#ConsiderasabadosemanaBool").prop("disabled", true);
                $("#ConsiderasabadosemanaBool").prop("checked", true);
                $("#ckbMarcaPercentualExtra6").prop("checked", false);
                $("#ckbMarcaPercentualExtra6").prop('disabled', true);
                $("#ckbMarcaPercentualExtra7").prop("checked", false);
                $("#ckbMarcaPercentualExtra7").prop('disabled', true);
            }
            else {
                $("#ConsiderasabadosemanaBool").prop("disabled", false);
                $("#ckbMarcaPercentualExtra7").prop('disabled', false);
            }

            if (!$("#txtPercentualextra" + vdia).attr("disabled") && $("#txtPercentualextra" + vdia).val() == 0) {
                if (vdia < 5) {
                    var perc = (50 + (parseInt(vdia) * 10));
                    $("#txtPercentualextra" + vdia).val(perc);
                }
                else {
                    $("#txtPercentualextra" + vdia).val(100);
                    $("#txtPercentualExtraSegundo" + vdia).val(100);
                    $("#txtTipoAcumulo" + vdia).val(1);
                }
            }
        });
    }
    function habilitaHorasExtras(vdia) {
        $("#txtPercentualextra" + vdia).prop('disabled', false);
        $("#txtQuantidadeextra" + vdia).prop('disabled', false);
        $("#txtTipoAcumulo" + vdia).prop('disabled', false);
        $("#txtPercentualExtraSegundo" + vdia).prop('disabled', false);
        $("#txtPercentualExtraNoturna" + vdia).prop('disabled', false);
        $("#txtQuantidadeExtraNoturna" + vdia).prop('disabled', false);
        $("#txtPercentualExtraSegundoNoturna" + vdia).prop('disabled', false);
    }
    function desabilitaHorasExtras(vdia) {
        $("#txtPercentualextra" + vdia).prop('disabled', true);
        $("#txtPercentualextra" + vdia).val("0");
        $("#txtPercentualExtraNoturna" + vdia).prop('disabled', true);
        $("#txtPercentualExtraNoturna" + vdia).val("0");

        $("#txtQuantidadeextra" + vdia).prop('disabled', true);
        $("#txtQuantidadeextra" + vdia).val("---:--");
        $("#txtQuantidadeExtraNoturna" + vdia).prop('disabled', true);
        $("#txtQuantidadeExtraNoturna" + vdia).val("---:--");
        $("#txtTipoAcumulo" + vdia).prop('disabled', true);
        $("#txtTipoAcumulo" + vdia).val("-1");
        $("#txtPercentualExtraSegundo" + vdia).prop('disabled', true);
        $("#txtPercentualExtraSegundo" + vdia).val("0");
        $("#txtPercentualExtraSegundoNoturna" + vdia).prop('disabled', true);
        $("#txtPercentualExtraSegundoNoturna" + vdia).val("0");
    }
    function MostrarSeparacaoPercentualHoraExtraNoturna(exibir) {
        if (exibir) {
            $(".separaPercentualNoturno").show();
        }
        else {
            $(".separaPercentualNoturno").hide();
        }
    }

    function validarSolicitacaoBloqueio()
    {
        if (_consultar == 1)
            bloquearInputs('todos');
        else if (_BloquearCiclos == 1)
            bloquearInputs('ciclos');
        else if (_msgBloqueio != '' && _msgBloqueio != undefined)
            bloquearInputs('bloqueio');
    }
    function bloquearInputs(tipoBloqueio)
    {
        if (tipoBloqueio == 'todos')
            bloquearTodosCampos()
        else if (tipoBloqueio == 'ciclos')
            bloquearTodosCamposCiclo()
        else if (tipoBloqueio == 'bloqueio')
            bloquearCamposFechamento();
        $('#pnlRestricoes').find('input, textarea, button, select').removeAttr('disabled');
    }

    function bloquearTodosCampos() {
        $('form').find('input, textarea, button, select').attr('disabled', 'disabled');
    }

    function bloquearCamposFechamento() {
        $('form').find('input, textarea, button, select').attr('disabled', 'disabled');
        $('#chkInativarHorario').removeAttr('disabled');
        $('#Descricao').removeAttr('disabled');
        $('#btnSalvarHorarioFlexivel').removeAttr('disabled');
    }

    function bloquearTodosCamposCiclo()
    {
        ////.attr('readonly', 'readonly');
        $('.ciclos').find('input, textarea, button, select').attr('disabled', 'disabled');
        $('#Ciclos').attr('disabled', 'disabled');
        $('#IntervaloautomaticoBool').attr('disabled', 'disabled');
        $('#rbMista').attr('disabled', 'disabled');
        $('#rbNormal').attr('disabled', 'disabled');
    }
    function hideModal() {
        $('#divLoadCadastroModal').modal('hide');
        $('form').find('input, textarea, button, select').removeAttr('disabled');
        window.location.href = '@Url.Action("Grid", "HorarioDinamico")';
    }
    function confButtonModal()
    {
        if (_retController != null && _retAcao !=null)
        $('#btnCancelar').prop('href', '#');
        $('#btnCancelarX').prop('href', '#');
        $('#btnCancelar').click(function () { hideModal(); });
        $('#btnCancelarX').click(function () { hideModal(); });
    }
    function _initializarViewBag()
    {
        _consultar          = @Html.Raw(Json.Encode(@ViewBag.Consultar));
        _BloquearCiclos     = @Html.Raw(Json.Encode(@ViewBag.BloquearCiclos));
        _msgBloqueio        = @Html.Raw(Json.Encode(@ViewBag.MensagemBloqueio));
        _retController      = @Html.Raw(Json.Encode(@ViewBag.RetController));
        _retAcao            = @Html.Raw(Json.Encode(@ViewBag.RetAcao));
        _inicioAdNoturno    = @Html.Raw(Json.Encode(@ViewBag.InicioAdNoturno) );
        _fimAdNoturno = @Html.Raw(Json.Encode(@ViewBag.FimAdNoturno));

        if (_consultar == null)
            _consultar = undefined;
        if (_msgBloqueio == null)
            _msgBloqueio = undefined;
        if (_retController == null)
            _retController = undefined;
        if (_retAcao == null)
            _retAcao = undefined;
        if (_inicioAdNoturno == null)
            _inicioAdNoturno = undefined;
        if (_fimAdNoturno == null)
            _fimAdNoturno = undefined;
    }

/*Eventos--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    //Intervalo automatico click
    $("#IntervaloautomaticoBool").click(function ()
    {
        JsonToHtml();

        if ($("#IntervaloautomaticoBool").is(':checked')) {
            $('.chk_pa:enabled').toArray().forEach(function (chkPA) {
                $(chkPA).attr("checked", true);
                SelecaoPA(chkPA);
            });
        }
    });

    //Ciclos change
    $("body").delegate("#Ciclos", "change", function ()
    {
        var qtdCicloSolicitado = $(this).val();
        tratarCiclo(_ciclos.length, qtdCicloSolicitado, 'ciclo');
        JsonToHtml();
    });

    //Jornada blur
    $("body").delegate(".lkpJornada", "blur", function (e)
    {
        if ($(this).is('input') && $(this).val() != '')
        {
            atualizarCicloJornada(e.currentTarget);
            atualizarPreAssinaladasJson();
            JsonToHtml();
        }
    });

    $("body").delegate(".chk_pa", "change", function () {
        SelecaoPA(this);
    });

    function SelecaoPA(ckbPA) {
        var cicloPosicao = $(ckbPA).attr('ID').match(/\d+/g)[0];
        var indiceCiclo = cicloPosicao.substring(0, 1);
        var posicaoPA = cicloPosicao.substring(1, 2);
        var PA = 'Preassinaladas' + posicaoPA;
        _ciclos[indiceCiclo - 1][PA] = $(ckbPA).is(':checked');
        atualizarPreAssinaladasJson();
        _ciclos.forEach((ciclo) => {
            if (ciclo.JornadaInfo.codigo != undefined) {
                var listaInputChk = filtroInputType(ciclo.PreassinaladasHtml.inputs, 'checkbox');

                ciclo.JornadaInfo.horariosJson.forEach((x, i) => {
                    if (listaInputChk.length > i) {
                        x.ckb = listaInputChk[i].checked;
                    }
                });
            }
        });
        //CicloAjuste();
        JsonToHtml();
    }

    //Jornada click modal de busca
    $("body").delegate(".lkpJornada", "click keydown", function (e) {
        cwk_EventoConsultaUnico(e, this, "", "Jornada", "", "");
    });

    //Sequencia change
    $("body").delegate(".qtddias", "change", function ()
    {
        var qtdSolicitado = $(this).val();
        var indice = $(this).attr('id').match(/\d+/g)[0];
        tratarSequencia(_ciclos[indice - 1], qtdSolicitado);
        JsonToHtml();
    });

    $("body").delegate(".chk_seq", "change", function ()
    {
        let indexCiclo = $(this).parents('.painel_horario_dinamico').index();

        let indexColuna = $(this).parents('.grupo_chk_seq').attr('class').split(/\s+/).find(getClassCollumnIndex).match(/\d+/)[0];

        let tipo = $(this).attr('id').match(/\D+/)[0];
        tipo = tipo.substring(4, tipo.length);

        ajustarSequenciaChkJson(tipo, _ciclos[indexCiclo].LHorarioCicloSequencia[indexColuna] );

        desenharSequencia(this, _ciclos[indexCiclo]);
    });

    //Submit
    $('form').on('submit', function (event)
    {
        event.preventDefault();
        var form = $("form");
        form.validate();
        if (form.valid()) {
            var formDados = getModeloHorario();
            $.ajax({
                type: 'POST',
                url: "/HorarioDinamico/Cadastrar",
                data: { horario: formDados, __RequestVerificationToken: gettoken() },
                dataType: 'json',
                beforeSend: function () {
                    $.blockUI({ message: '<h2>Salvando <img src="../../Content/img/circulosLoading.GIF"></h2>' });
                },
                success: function (result)
                {
                    if (result.redirectTo) { window.location.href = result.redirectTo; }
                    else
                    {
                        $.each(result.Errors, function (key, value) {
                            if (value != null) {
                                var erro = '';
                                for (var i = 0; i < value.length; i = i + 1) {
                                    erro = erro + value[i].ErrorMessage + ', ';
                                }
                                addErroInput(key, erro);
                            }
                        });
                        cwkErroTit("A Página Contém Erros!", "Foram encontrados erros ao salvar a página, por favor verifique!");
                        $(".salvando").removeAttr("disabled");
                    }
                },
                complete: function () {
                    $.unblockUI();
                }
            });
        }
        else {
            cwkErroTit("A Página Contém Erros!", "Foram encontrados erros ao salvar a página, por favor verifique!");
        }
        return false;
    });

    var _ciclos = @Html.Raw(Json.Encode(@Model.LHorarioCiclo));
    var _jornadas = 0;
    var _modeloJornada = JSON.parse('[{"entrada": "", "saida": "","ckb": "","sLeitura":true },{"entrada": "", "saida": "","ckb": "", "sLeitura":true },{"entrada": "", "saida": "","ckb": "", "sLeitura":true },{"entrada": "", "saida": "","ckb": "", "sLeitura":false }]');
    var _modeloSequeJsonVazio = JSON.parse('{ "Trabalha": false, "Folga":false, "Dsr":false, "IdHorarioDinamicoCiclo":0, "Id":0 }');
    var _modeloCicloJsonVazio = JSON.parse('{"Tipoacumulo":0,"Descricao":"","QtdSequencia":0, "Preassinaladas1":false,"Preassinaladas2":false,"Preassinaladas3":false,"LHorarioCicloSequencia":[], "Id":0,"Codigo":0, "Idjornada":0,"DescJornada":"","IdhorarioDinamico":0}');
    var _divCiclo = $('.ciclos');
    var _preAssinaladas = 0;

/*Metodos--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    //Genérico
    function JsonToHtml()
    {
        limpar();
        atualizarIndiceSequencias();
        atualizarIndiceCiclos();
        _ciclos.forEach((ciclo) =>
        {
            addCiclo(ciclo);
            addJornada(ciclo);
            addSequenciaHtml(ciclo,false);
        });

        marcarCheckBox();
        liberarCheckBoxTarget('.chk_pa');
        razorValidationRefresh();
    }
    function limpar() { $('.ciclos').html(''); }
    function liberarCheckBoxTarget(target) {
        var p = $(target);
        $.each(p, function (i, obj)
        {
            if (JSON.parse($(obj).attr('sLeitura')) == true)
            {
                $(obj).attr("disabled", false);
                $(obj).removeAttr("readonly");
            }
            else {
                $(obj).attr("disabled", true);
                $(obj).prop("checked", false);
            }
        });
    }
    function setVal(target, valor)
    {
        $(target).val(valor);
    }
    function setAtributo(target, atributo, valor)
    {
        $(target).attr(atributo, valor);
    }
    function listaDelete(x) { x.pop(); }
    //sequencia
    function desenharSequencia(x,ciclo)
    {
        let y = $(x).parents('.tabela_sequencia');
        $(y).html('');
        //seqAddCollumn(montarListaSequenciaHeader(), y);--retirar
        addSequenciaHtml(ciclo,y);
    }
    function tratarSequencia(ciclo,qtdSolicitado)
    {
        let acao = 0; //0-add 1-delete
        if (ciclo.LHorarioCicloSequencia.length > qtdSolicitado)
            acao = 1;

        if (acao == 0)
            tratarSequenciaAdd(ciclo, qtdSolicitado);
        else
            tratarSequenciaDelete(ciclo, qtdSolicitado);
    }
    function tratarSequenciaAdd(ciclo, qtdSolicitado)
    {
        i = ciclo.LHorarioCicloSequencia.length;
        for (i; i < qtdSolicitado; i++)
        {
            addSequenciaJson(ciclo);
            ciclo.qtdSequencia = ciclo.LHorarioCicloSequencia.length;
        }
        ciclo.QtdSequencia = qtdSolicitado;
    }
    function addSequenciaJson(ciclo) {
        if (ciclo.LHorarioCicloSequencia == undefined)
            console.log('ERRO addSequencias - objeto não definido');

        _modeloSequeJsonVazio.idHorarioDinamicoCiclo = ciclo.Id;
        ciclo.LHorarioCicloSequencia.push(JSON.parse(JSON.stringify(_modeloSequeJsonVazio)));
    }
    function tratarSequenciaDelete(ciclo, qtdSolicitado)
    {
        i = ciclo.LHorarioCicloSequencia.length;
        for (i; i > qtdSolicitado; i--)
        {
            listaDelete(ciclo.LHorarioCicloSequencia);
        }
        ciclo.QtdSequencia = qtdSolicitado;
    }
    function addSequenciaHtml(ciclo,ulList)
    {
        let _ulList;

        if (ulList == false)
            _ulList = $('.tabela_sequencia').last();
        else
            _ulList = ulList;

        if (ciclo.LHorarioCicloSequencia != undefined)
        {
            ciclo.LHorarioCicloSequencia.forEach((seq,i) =>
            {
                seqAddCollumn(montarListaSequencia(seq,i), _ulList);
            });
        }
    }
    function seqAddCollumn(obj, ulList) { $(ulList).append(obj);
    }
    function montarListaSequencia(modelo,indiceColuna)
    {
        let _id = modelo.indice;
        let _domNode =
            `<div class= "col-md-1 seqIndex${modelo.indice}">
                <div class=" grupo_chk_seq collumnIndex_${ indiceColuna }">
                    <div class="row"> <label class="control-label label-sm">${modelo.indice}</label></div>
                    <div class="div_chk_seq row"><input type="checkbox" name="chk_trab0${_id}" id="chk_trab0${_id}" class="form-check-input chk_seq" ${(modelo.Trabalha)?'checked':''}></div>
                    <div class="div_chk_seq row"><input type="checkbox" name="chk_folga0${_id}" id="chk_folga0${_id}" class="form-check-input chk_seq" ${(modelo.Folga) ? 'checked' : ''}></div>
                    <div class="div_chk_seq row"><input type="checkbox" name="chk_dsr0${_id}" id="chk_dsr0${_id}" class="form-check-input chk_seq" ${(modelo.Dsr) ? 'checked' : ''}></div>
                </div>
            </div>`;

        return _domNode;
    }
    function montarListaSequenciaHeader() {
        return `<div class="col-md-1 seq_header">
                <ul> <li><p> </p></li>
            <li><strong>Trab.</strong></li>
            <li><strong>Folga</strong></li>
            <li><strong>DSR</strong></li>
            </ul>
            </div>`;
    }
    function marcarCheckBox()
    {
        //marcarCheckBoxTarget('.chk_seq');
        //marcarCheckBoxTarget('.chk_pa');
    }
    function marcarCheckBoxTarget(target)
    {
        var p = $(target);

        $.each(p, function (i, obj)
        {
            if (JSON.parse(obj.value) == true)
                obj.setAttribute('checked', true);
        });
    }
    function atualizarIndiceSequencias() {
        var i = 1;

        _ciclos.forEach((c) => {
            c.LHorarioCicloSequencia.forEach((s) => {
                s.indice = i;
                i++;
            });
        });
    }
    function ajustarSequenciaChkJson(tipo, sequenciaJson)
    {

        switch (tipo)
        {
            case 'trab':
                if (sequenciaJson.Trabalha === true)
                    sequenciaJson.Trabalha = false;
                else
                {
                    sequenciaJson.Trabalha = true;
                    sequenciaJson.Folga = false;
                    sequenciaJson.Dsr = false;
                }
                break;
            case 'folga':

                if (sequenciaJson.Folga === true) {
                    sequenciaJson.Folga = false;
                    sequenciaJson.Dsr = false;
                }
                else {
                    sequenciaJson.Trabalha = false;
                    sequenciaJson.Folga = true;
                }
                break;
            case 'dsr':
                if (sequenciaJson.Dsr === true) {
                    sequenciaJson.Dsr = false;
                }
                else {
                    sequenciaJson.Trabalha = false;
                    sequenciaJson.Folga = true;
                    sequenciaJson.Dsr = true;
                }
                break;
        }
    }
    function setSequenciaChkJson(seq, arValor)
    {
        seq.Trabalha = arValor.trab;
        seq.Folga = arValor.folga;
        seq.Dsr = arValor.dsr;
    }
    function setSequenciaChkJson1(indexCiclo, indexColuna, tipo, valor)
    {
        var seq = _ciclos[indexCiclo].LHorarioCicloSequencia[indexColuna];

        if (tipo == 'trab')
            seq.Trabalha = valor;
        if (tipo == 'folga')
            seq.Folga = valor;
        if (tipo == 'dsr')
            seq.Dsr = valor;
    }

    //metodos ciclos
    function tratarCiclo(qtdAtual, qtdSolicitado)
    {
        let acao = 0; //0-add 1-delete
        if (qtdAtual > qtdSolicitado)
            acao = 1;

        if (acao == 0)
            tratarCicloAdd(_ciclos,qtdSolicitado);
        else
            tratarCicloDelete(_ciclos, qtdSolicitado);
    }
    function tratarCicloAdd(ciclo, qtdSolicitado)
    {
        while (qtdSolicitado > ciclo.length || ciclo.length == undefined)
        {
            ciclo.push(JSON.parse(JSON.stringify(_modeloCicloJsonVazio)));
        }
    }
    function addCiclo(modelo)
    {
        _divCiclo.append(formatModelo(modelo));
    }
    function tratarCicloDelete(ciclo, qtdSolicitado)
    {
        i = ciclo.length;
        for (i; i > qtdSolicitado; i--) {
            listaDelete(ciclo);
        }
    }

    function formatModelo(modeloJson)
    {
        var _modelo_ciclo =
            `<div class="painel_horario_dinamico">
                    <div class="col-md-12 col-lg-12">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="control-label label-sm" for="DescJornadaCopiar${modeloJson.indice}">Jornada</label>
                                        <div class="input-group input-group-sm">
                                            <input class="form-control input-sm lkpJornada horario" id="lkpJornada${modeloJson.indice}" name="DescJornadaCopiar${modeloJson.indice}" type="text" value="${modeloJson.DescJornada}" data-val="true" data-val-required="O Campo Jornada é Obrigatório">
                                            <span class="input-group-btn"><button class="btn btn-primary lkpJornada" id="btnJornada${modeloJson.indice}" type="button"><span class="glyphicon glyphicon-search"></span></button></span>
                                        </div>
                                        <span class="field-validation-error" data-valmsg-for="DescJornadaCopiar${modeloJson.indice}" data-valmsg-replace="true"></span>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="painel_ciclo_horario">
                                            <div class="col-md-4" style="padding-right:0px;">
                                                <div class="panel panel-default" style="min-height:60px">
                                                    <div class="panel-body" style="text-align: center; padding-top:5px; padding-bottom:0px;">
                                                        <div class="row">
                                                            <div class="col-md-7" style="padding-left:0px; padding-right:0px;">
                                                                <label class="label-sm pull-right">Horários: </label>
                                                            </div>
                                                            <div class="col-md-5" style="padding-left:0px; padding-right:0px;">
                                                                <input style="background:#CBE5E7;" class="form-control input-sm time timeJornada timeJornadaE horario" id="txt_e${modeloJson.indice}" name="Horariodescricao_${modeloJson.indice}" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-left:0px; padding-right:0px;">
                                                                <label class="label-sm">Pré-Assinaladas: </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-2" style="padding-left:0px; padding-right:0px;">
                                                <div class="panel panel-default" style="min-height:60px">
                                                    <div class="panel-body" style="text-align: center; padding-top:5px; padding-bottom:3px;">
                                                        <div class="row">
                                                            <div class="col-md-6" style="padding-left:0px; padding-right:0px;">
                                                                <input class="form-control input-sm time timeJornada timeJornadaS horario" id="txt_s${modeloJson.indice}1" name="Horariodescricaosai_${modeloJson.indice}1" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>

                                                            <div class="col-md-6" style="padding-left:0px; padding-right:0px;">
                                                                <input style="background:#CBE5E7;" class="form-control input-sm time timeJornada timeJornadaE horario" id="txt_e${modeloJson.indice}2" name="Horariodescricao_${modeloJson.indice}2" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-left:0px; padding-right:0px;">
                                                                <input class="chk_pa preassinalada horario" id="chk_pa${modeloJson.indice}1" name="Preassinaladas${modeloJson.indice}1" type="checkbox" ${(modeloJson.Preassinaladas1) ? 'checked' : ''} disabled="disabled">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-2" style="padding-left:0px; padding-right:0px;">
                                                <div class="panel panel-default" style="min-height:60px">
                                                    <div class="panel-body" style="text-align: center; padding-top:5px; padding-bottom:3px;">
                                                        <div class="row">
                                                            <div class="col-md-6" style="padding-left:0px; padding-right:0px;">
                                                                <input class="form-control input-sm time timeJornada timeJornadaS horario" id="txt_s${modeloJson.indice}2" name="Horariodescricaosai_2" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>

                                                            <div class="col-md-6" style="padding-left:0px; padding-right:0px;">
                                                                <input style="background:#CBE5E7;" class="form-control input-sm time timeJornada timeJornadaE horario" id="txt_e${modeloJson.indice}3" name="Horariodescricao_${modeloJson.indice}3" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-left:0px; padding-right:0px;">
                                                                <input class="chk_pa preassinalada horario" id="chk_pa${modeloJson.indice}2" name="Preassinaladas${modeloJson.indice}2" type="checkbox" ${(modeloJson.Preassinaladas2)?'checked':''} disabled="disabled">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-2" style="padding-left:0px; padding-right:0px;">
                                                <div class="panel panel-default" style="min-height:60px">
                                                    <div class="panel-body" style="text-align: center; padding-top:5px; padding-bottom:3px;">
                                                        <div class="row">
                                                            <div class="col-md-6" style="padding-left:0px; padding-right:0px;">
                                                                <input class="form-control input-sm time timeJornada timeJornadaS horario" id="txt_s${modeloJson.indice}3" name="Horariodescricaosai_${modeloJson.indice}3" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>

                                                            <div class="col-md-6" style="padding-left:0px; padding-right:0px;">
                                                                <input style="background:#CBE5E7;" class="form-control input-sm time timeJornada timeJornadaE horario" id="txt_e${modeloJson.indice}4" name="Horariodescricao_${modeloJson.indice}4" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-left:0px; padding-right:0px;">
                                                                <input class="chk_pa preassinalada horario" id="chk_pa${modeloJson.indice}3" name="Preassinaladas${modeloJson.indice}3" type="checkbox" ${(modeloJson.Preassinaladas3) ? 'checked' : ''} disabled="disabled">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-2" style="padding-left:0px">
                                                <div class="panel panel-default" style="min-height:60px">
                                                    <div class="panel-body" style="text-align: center; padding-top:5px; padding-bottom:0px;">
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-left:0px; padding-right:0px;">
                                                                <input class="form-control input-sm time timeJornada timeJornadaS horario" id="txt_s${modeloJson.indice}4" name="Horariodescricaosai_${modeloJson.indice}4" placeholder="--:--" type="text" value="--:--" maxlength="5" autocomplete="off" readonly="readonly">
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-left:0px; padding-right:0px;">
                                                                <label class="label-sm">&nbsp; </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                    <div class="row">
                                        <div class="col-md-2">
                                           <div class="row">
                                                <div class="col-md-6">
                                                    <div class="">
                                                        <div class="form-group">
                                                            <label class="control-label label-sm">Ciclo</label>
                                                            <div class="input-group input-group-sm">
                                                                <input class="form-control input-sm ciclo horarioDinamico valid" name="ciclo" size="5" type="text" value="${modeloJson.indice}">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="">
                                                        <div class="form-group">
                                                            <label class="control-label label-sm">Dias</label>
                                                            <div class="input-group input-group-sm inp">
                                                                <input class="form-control input-sm qtddias horarioDinamico"
                                                                       size="5" type="text"
                                                                       id="horarioDinamico${modeloJson.indice}"
                                                                       name="qtddias${modeloJson.indice}"
                                                                       value="${modeloJson.QtdSequencia}"
                                                                       data-val="true"
                                                                       data-val-number="O campo dias deve ser um número maior que zero."
                                                                       data-val-regex="O campo dias deve conter apenas números!"
                                                                       data-val-regex-pattern="^((?!(0))[0-9]{1,9})$"
                                                                       data-val-required="O Campo dias é Obrigatório">
                                                                <span class="field-validation-error"
                                                                      data-valmsg-for="qtddias${modeloJson.indice}"
                                                                      data-valmsg-replace="true"></span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="tabela_sequenciaxxx">
                                                        <div class="col-md-1 seq_header">
                                                            <label class="control-label label-sm">Seq.</label></br>
                                                                <label class="control-label label-sm">Trab.</label></br>
                                                                <label class="control-label label-sm">Folga</label></br>
                                                                <label class="control-label label-sm">DSR</label>

                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="col-md-10">
                                            <div class="row">
                                                <div class="painel_ciclo_sequncia">
                                                    <div class="tabela_sequencia"></div>
                                                    <div class="col-md-12">
                                                        <input type="hidden" name="fakevalidation${modeloJson.indice}" id="fakevalidation${modeloJson.indice} data-val-required">
                                                        <span class="field-validation-valid" data-valmsg-for="fakevalidation${modeloJson.indice}" data-valmsg-replace="true"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>`;
        return _modelo_ciclo;
    }
    function atualizarIndiceCiclos()
    {
        _ciclos.forEach((f, i) => {
            f.indice = i + 1;
        });
    }
    function atualizarCicloJornada(lkp) {
        var indiceCiclo = $(lkp).attr('ID').match(/\d+/g)[0];
        _ciclos[indiceCiclo - 1].DescJornada = $(lkp).val();
    }
    //Jornada
    function atualizarJornadaInfoJson(ciclo)
    {
        ciclo.JornadaInfo = [];
        ciclo.JornadaInfo.descricao = ciclo.DescJornada;
        ciclo.JornadaInfo.codigo =  $.trim(ciclo.DescJornada.substring(0, ciclo.DescJornada.indexOf('|')));
        ciclo.JornadaInfo.horarios = tratarHora(JSON.parse(JSON.stringify(ciclo.DescJornada)));
        ciclo.JornadaInfo.horariosJson = preencheHoraPreAssinaladaJson(JSON.parse(JSON.stringify(_modeloJornada)), ciclo.JornadaInfo.horarios);

    }
    function tratarHora(strHora) {
        let horario = strHora.substr(strHora.indexOf('|') + 1, strHora.length);

        let horas = horario.split('-');

        return horas;
    }
    function tratarDescHora(horas, indice) {
        let valor = 0;
        if ($.trim(horas[indice]) == "" || $.trim(horas[indice]) == null || $.trim(horas[indice]) == undefined) {
            valor = "--:--";
        }
        else {
            valor = $.trim(horas[indice]);
        }
        return valor;
    }
    //Jornada - pré_assinaladas
    function atualizarPreAssinaladasJson()
    {
        document.querySelectorAll('.painel_ciclo_horario').forEach((el, i) => {
            _ciclos[i].PreassinaladasHtml = [];
            _ciclos[i].PreassinaladasHtml.tabela = el;
            _ciclos[i].PreassinaladasHtml.inputs = $(el).find('input');
        });
    }
    function getPreAssinaladas()
    {
        let ar = [];
        document.querySelectorAll('.painel_ciclo_horario').forEach(el => {
            var p = new Object();
            p.tabela = el;
            p.inputs = $(el).find('input');
            ar.push(p);
        });

        return ar;
    }
    function preencheHoraPreAssinaladaHtml(target, valor) {
        $(target).val(valor);
    }
    function preencheHoraPreAssinaladaJson(lista, horas)
    {
        for (var i = 1; i <= lista.length; i++)
        {
            if (horas.length >= 2 * i) {
                for (var j = 1; j <= horas.length; j++)
                {
                    if (j > ((2 * i) - 2) && j <= 2 * i)
                    {
                        let x = tratarDescHora(horas, j - 1);

                        if (j % 2 == 0)
                            lista[i-1].saida = x;
                        else
                            lista[i-1].entrada = x;
                    }
                }
            }
        }

        return lista;
    }
    function preencheIntervaloHtml(ciclo)
    {
        if (ciclo.JornadaInfo.codigo != undefined)
        {
            var listaInputText = filtroInputType(ciclo.PreassinaladasHtml.inputs, 'text');
            var listaInputChk = filtroInputType(ciclo.PreassinaladasHtml.inputs, 'checkbox');

            ciclo.JornadaInfo.horariosJson.forEach((x, i) => {
                setVal(listaInputText[2 * i], x.entrada);
                setVal(listaInputText[(2 * i) + 1], x.saida);
                setAtributo(listaInputChk[i], 'sLeitura', x.sLeitura);

                if (x.ckb)
                    setAtributo(listaInputChk[i], 'checked', x.ckb);
            });
        }
    }

    function filtroInputType(lista, type) {
        var x = lista.toArray();
        var y = new Array();
        x.forEach((z) => {
            if (z.type == type)
                y.push(z);
        });

        return y;
    }
    //Jornada - pré_assinaladas - intervalo automatico
    function habilitaCheckboxPreassinaladas(flag, ciclo)
    {
        let horariosJson = ciclo.JornadaInfo.horariosJson;
        if (flag)
        {
            horariosJson[0].sLeitura = validaPreassinalada(horariosJson[0].saida, horariosJson[1].entrada);
            horariosJson[1].sLeitura = validaPreassinalada(horariosJson[1].saida, horariosJson[2].entrada);
            horariosJson[2].sLeitura = validaPreassinalada(horariosJson[2].saida, horariosJson[3].entrada);

            horariosJson[0].ckb = (ciclo.Id != 0) ? ciclo.Preassinaladas1 : validaPreassinalada(horariosJson[0].saida, horariosJson[1].entrada);
            horariosJson[1].ckb = (ciclo.Id != 0) ? ciclo.Preassinaladas2 : validaPreassinalada(horariosJson[1].saida, horariosJson[2].entrada);
            horariosJson[2].ckb = (ciclo.Id != 0) ? ciclo.Preassinaladas3 : validaPreassinalada(horariosJson[2].saida, horariosJson[3].entrada);
        }
        else
        {
            horariosJson[0].ckb = horariosJson[0].sLeitura = false;
            horariosJson[1].ckb = horariosJson[1].sLeitura = false;
            horariosJson[2].ckb = horariosJson[2].sLeitura = false;

        }
    }
    function validaPreassinalada(obj1, obj2)
    {
        if (validaHoraNaoVazia(obj1) && validaHoraNaoVazia(obj2))
            return true;

        return false;
    }
    function validaHoraNaoVazia(obj) {
        if (obj != '' && obj != '--:--')
            return true;

        return false;
    }
    function addJornada(ciclo)
    {
        //preencher intervalo precisa das duas atualizações
        atualizarJornadaInfoJson(ciclo);

        habilitaCheckboxPreassinaladas($("#IntervaloautomaticoBool").is(':checked'), ciclo);

        atualizarPreAssinaladasJson();

        preencheIntervaloHtml(ciclo);
    }

    //submit util
    function getModeloHorario()
    {
        var Items = new Object();
        Items.HorariosFlexiveis = new Array();
        Items.LHorariosDinamicosPHExtra = new Array();
        Items.LimitesDDsrProporcionais = new Array();
        Items.LHorarioCiclo = 0;

        //Gera Objetos HorarioDinamicoRestricao
        Items.HorarioDinamicoRestricao = new Array();
        $(".divRestricao").each(function () {
            var div = this;
            var jHorarioRestricao = new Object();

            var propriedadesSalvar = [];
            $("input[name*='HorarioDinamicoRestricao[']", this).each(function () {
                propriedadesSalvar.push($(this).attr("name"));
            });

            $("select[name*='HorarioDinamicoRestricao[']", this).each(function () {
                propriedadesSalvar.push($(this).attr("name"));
            });

            $.each($.unique(propriedadesSalvar), function (i, val) {
                element = $("input[name='" + val + "']", div);
                name = element.attr("name");
                if (name === "undefined") {
                    element = $("select[name='" + val + "']", div);
                    name = element.attr("name");
                }
                name = name.substr(name.indexOf(".") + 1, name.length);
                if ($(element).attr("type") == "checkbox") {
                    value = element.is(':checked');
                }
                else {
                    value = element.val();
                }

                jHorarioRestricao[name] = value;
            });
            Items.HorarioDinamicoRestricao.push(jHorarioRestricao);
        });

        //Items.QtdCiclo = _ciclos.length;
        //Gera o Json do Horário
        console.log($(".horario"));
        $(".horario").each(function () {
            element = $(this);
            name = element.attr("name");

            if ($(this).attr("type") == "checkbox") {
                value = element.is(':checked');
            }
            else if ($(this).attr("type") == "radio")
            {
                if (element.is(':checked')) {
                    value = element.val()
                }
            }
            else if ($(this).hasClass('currency') || $(this).hasClass('money') || $(this).hasClass('decimalPercent'))
            {
                value = element.val().replace(',', '.');
            }
            else
            {
                value = element.val();
            }
            Items[name] = value;
        });

        //Gera Objetos HorariosPHExtra
        let retLHorariosDinamicosPHExtra = getFormValueHorarioPHExtra();
        if (retLHorariosDinamicosPHExtra.length > 0)
            Items.LHorariosDinamicosPHExtra = retLHorariosDinamicosPHExtra;


        Items.LimitesDDsrProporcionais = ConstroiListaJsonDeListaInputsMvc('.linhaDDSR');
        Items.LHorarioCiclo = CicloAjuste();
        Items.QtdCiclo = Items.LHorarioCiclo.length;
        return JSON.stringify(Items);
    }
    //submit util - Gera Objetos HorariosPHExtra
    function getFormValueHorarioPHExtra()
    {

        let t = new Array();

        $(".DivLHorarioPHExtra").each(function ()
        {
            let jLHorariosDinamicosPHExtra = new Object();
            var div = this;

            var propriedadesSalvar = [];

            $("input[name*='LHorariosDinamicosPHExtra[']", this).each(function () {
                propriedadesSalvar.push($(this).attr("name"));
            });

            $("select[name*='LHorariosDinamicosPHExtra[']", this).each(function () {
                propriedadesSalvar.push($(this).attr("name"));
            });

            $.each($.unique(propriedadesSalvar), function (i, val)
            {
                element = $("input[name='" + val + "']", div);
                name = element.attr("name");
                if (name === "undefined") {
                    element = $("select[name='" + val + "']", div);
                    name = element.attr("name");

                }

                name = name.substr(name.indexOf(".") + 1, name.length);
                if ($(element).attr("type") == "checkbox") {
                    value = element.is(':checked');
                }
                else if (element.hasClass('currency') || element.hasClass('money') || element.hasClass('decimalPercent')) {
                     var valorElemento = element.val();
                     if (isEmpty(valorElemento)) {
                         value = 0;
                     }
                     else {
                     value = valorElemento.replace(',', '.');
                     }
                }
                else {
                    value = element.val();
                }

                if (name.indexOf("TipoAcumulo") >= 0 && (value == null || value == "")) {
                    value = 0;
                }
                jLHorariosDinamicosPHExtra[name] = value;
            });

            t.push(jLHorariosDinamicosPHExtra)

        });

        return t;
    }
    //submit util - Gera Objetos
    function ConstroiListaJsonDeListaInputsMvc(nomeClasseLinhas)
    {
        var lista = $('form').find(nomeClasseLinhas + ' input').toArray();
        var listaObjs = new Array();
        var obj = null;
        lista.forEach(function (item) {
            var lNomeVar = ($(item).attr('id').split('__'));
            if (lNomeVar[1] == 'Id' && obj != null) {
                listaObjs.push(obj);
                obj = new Object();
            }
            if (lNomeVar[1] == 'Id' && obj == null) {
                obj = new Object();
            }
            obj[lNomeVar[1]] = $(item).prop('value');
        });
        if (obj != null) {
            listaObjs.push(obj);
        }
        return listaObjs;
    }
    function CicloAjuste()
    {
        _ciclos.forEach((c) =>
        {
            if (c.JornadaInfo != undefined)
            {
                c.CodigoJornada = c.JornadaInfo.codigo;
                c.Preassinaladas1 = c.JornadaInfo.horariosJson[0].ckb;
                c.Preassinaladas2 = c.JornadaInfo.horariosJson[1].ckb;
                c.Preassinaladas3 = c.JornadaInfo.horariosJson[2].ckb;

                delete c.JornadaInfo;
                delete c.PreassinaladasHtml;
            }
        });

        return _ciclos;
    }

/*validações-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    function sequenciaValidaColuna(sequencia)
    {
        let retorno = [];

        if (!sequenciaValidaColunaTrabalho(sequencia))
        {
            let v = new Object();
            v.Valido = false;
            v.Mensagem = "A opção 'Trabalha' não pode ser selecionada junto com 'Folga' ou 'DSR'";
            retorno.push(v);
        }

        if (!sequenciaValidaColunaFolga(sequencia))
        {
            let v = new Object();
            v.Valido = false;
            v.Mensagem = "A opção 'Folga' não pode ser selecionada junto com 'Trabalha'";
            retorno.push(v);
        }

        if (!sequenciaValidaColunaDsr(sequencia))
        {
            let v = new Object();
            v.Valido = false;
            v.Mensagem = "A opção 'DSR' não pode ser selecionada sem 'Folga' ou com 'Trabalha'";
            retorno.push(v);
        }

        if (!sequenciaValidaColunaSemValores(sequencia)) {
            let v = new Object();
            v.Valido = false;
            v.Mensagem = "A coluna não pode ficar sem marcações";
            retorno.push(v);
        }

        return retorno;
    }
    function sequenciaValidaColunaTrabalho(sequencia)
    {
        if (sequencia.Trabalha && (sequencia.Folga || sequencia.Dsr))
            return false;
        return true;
    }
    function sequenciaValidaColunaFolga(sequencia) {
        if (sequencia.Folga && sequencia.Trabalha)
            return false;

        return true;
    }
    function sequenciaValidaColunaDsr(sequencia)
    {
        if (sequencia.Dsr && !sequencia.Folga)
            return false;

        if (sequencia.Dsr && sequencia.Trabalha)
            return false;

        return true;
    }
    function sequenciaValidaColunaSemValores(sequencia)
    {
        if (!sequencia.Dsr && !sequencia.Folga && !sequencia.Trabalha)
            return false;

        return true;
    }
    function sequenciaValidaQtdDsr(listaSequencia)
    {
        let tamanhoLista = listaSequencia.length;
        let qtdDsrChecado=0;
        let qtdDsrNecessario = 0;

        if (tamanhoLista < 7)
        {
            let qtdDsrNecessario = 1;
            qtdDsrChecado = contarDsrChecado(listaSequencia);
        }
        else
        {
            // 1 dsr para cada 7 sequencias
            let x = Number(tamanhoLista) / 7;
            qtdDsrNecessario = Math.floor(x);
            qtdDsrChecado = contarDsrChecado(listaSequencia);
        }

        return qtdDsrChecado == qtdDsrNecessario;
    }
    function contarDsrChecado(listaSequencia)
    {
        let qtd = 0;
        listaSequencia.forEach((l) =>
        {
            if (l.Dsr)
                qtd++;
        });
        return qtd;
    }
    function razorValidationRefresh()
    {
        $('#Ciclos').updateValidation();
    }

    function validarSequencia(ciclo)
    {
        let retorno = [];
        let listaSequencias = ciclo.LHorarioCicloSequencia;

        listaSequencias.forEach((l,i) =>
        {
            let x = new Object();
            x.indice = i;
            x.erros = sequenciaValidaColuna(l);
            retorno.push(x);
        });

        return retorno;
    }
    function setClassErro(x, y)
    {
        let p = $(x).parents('ul');
        if (1==1)
            $(p).addClass('seq_error');
        else
            $(p).removeClass('seq_error');
    }

    function getClassCollumnIndex(valor)
    {
        return valor.indexOf('collumnIndex_') >= 0;
    }

    /// Validações DSR
    function loadConvertDadosDSR() {
        var $radios = $('input:radio[name=rTipoDSR]');
        if ($("#DescontardsrBool").is(':checked')) {
            if ($("#bUtilizaDDSRProporcional").val().toLowerCase() === "true") {
                $radios.filter('[value=2]').prop('checked', true);
            } else if ($("#DSRPorPercentual").val().toLowerCase() === "true") {
                $radios.filter('[value=3]').prop('checked', true);
            }
            else {
                $radios.filter('[value=1]').prop('checked', true);
            }
        }
    }

    function validaDSR() {
        if ($("#DescontardsrBool").is(':unchecked')) {
            $("#DesconsiderarFeriadoDDSR").prop('disabled', true).prop('checked', false);
        }
        else {
            $("#DesconsiderarFeriadoDDSR").prop('disabled', false);
        }

        switch ($('input:radio[name=rTipoDSR]:checked').val()) {
            case "1":
                controlaCamposDSRPadraoCLT(true);
                controlaCamposDSRProporcional(false);
                controlaCamposDSRPercentual(false);
                break;
            case "2":
                controlaCamposDSRPadraoCLT(false);
                controlaCamposDSRProporcional(true);
                controlaCamposDSRPercentual(false);
                break;
            case "3":
                controlaCamposDSRPadraoCLT(false);
                controlaCamposDSRProporcional(false);
                controlaCamposDSRPercentual(true);
                break;
            default:
                controlaCamposDSRPadraoCLT(false);
                controlaCamposDSRProporcional(false);
                controlaCamposDSRPercentual(false);
                break;
        }
    }

    function controlaCamposDSRPadraoCLT(habilitado) {
        $('#divddsrfixo').toggle(habilitado);
    }

    function controlaCamposDSRProporcional(habilitado) {
        $('#divddsrprop').toggle(habilitado);
        $('#bUtilizaDDSRProporcional').val(habilitado);
    }

    function controlaCamposDSRPercentual(habilitado) {
        $('#divDescontohorasdsr').toggle(habilitado);
        $('#DSRPorPercentual').val(habilitado);
    }

    $('#PontoPorExcecaoBool').click(function (e) {
        if ($("#PontoPorExcecaoBool").is(':checked')) {
            $("#IntervaloautomaticoBool").prop("checked", false);
        }
        validaIntervaloAutomatico();
    });

    function validaIntervaloAutomatico() {
        if (!$("#IntervaloautomaticoBool").is(':checked')) {
            $('.chk_pa').attr("disabled", true);
            $('.chk_pa').prop("checked", false);
        }
    }

    $('#IntervaloautomaticoBool').click(function (e) {
        if ($("#IntervaloautomaticoBool").is(':checked')) {
            $("#PontoPorExcecaoBool").prop("checked", false);
        }
    });

</script>
@*Scripts referente a Restricao*@
<script>
    $(document).ready(function () {
        cwk_EventoConsulta("#btnEmpresa", "#lkpEmpresa", "EventoConsulta", "Empresa", "");
        cwk_EventoConsulta("#btnContrato", "#lkpContrato", "EventoConsulta", "Contrato", "");
    });

    $("#btnInserirNovaRestricao").click(function (e) {
        var itemIndex = $(".divRestricao").length;
        e.preventDefault();
        var tipoRest = $('input[name=TipoRestricao]:checked').val();
        var restr = $("#lkpEmpresa").val();
        if (tipoRest == 1) {
            restr = $("#lkpContrato").val();
        }

        if (isEmpty(restr)) {
            cwkAlerta('Selecione uma restrição');
        }
        else if ($('#tbRestricao tr:not([style*="display: none"]) td:contains(' + restr + ')').length > 0) {
            cwkAlerta('Restrição já existe');
        } else {
            $("#loading").modal();
            var idHor = $("#idHorario").val();

            var obj = { index: itemIndex, tipoRestricao: tipoRest, restricao: restr, idHorario: idHor, __RequestVerificationToken: gettoken() };
            var url = '@Url.Action("AdicionaNovaRestricao", "HorarioDinamico")' + "?" + $.param(obj, true);
            url = decodeURIComponent(url);

            $.get(url, function (data) {
                if (data.Success == true) {
                    $("#divRestricoes").prepend(data.HTML);
                    $("#lkpEmpresa").val("");
                    $("#lkpContrato").val("");
                }
                else {
                    cwkErro(data.Erro)
                }
                $("#loading").modal('hide');
            }).fail(function (xhr, status, error) {
                $("#loading").modal('hide');
                cwkErro("An AJAX error occured: " + status + "\nError: " + error);
            });
        }
    });

    function excluirRestricao(btn) {
        var containerRestricaoAtual = $(btn).closest('.divRestricao');
        containerRestricaoAtual.hide();
        console.log("Marcar = "+$(containerRestricaoAtual).children( ".marcarExcluido" ).attr('id'))
        $(containerRestricaoAtual).children(".marcarExcluido").val(true);
    }

    function validaPesquisaRestricao() {
        if ($('#idTipoRestricaoEmpresa').is(':checked')) {
            $("#divEmpresa").show();
            $("#divContrato").hide();
            $("#lkpContrato").val("");
        };

        if ($('#idTipoRestricaoContrato').is(':checked')) {
            $("#divEmpresa").hide();
            $("#lkpEmpresa").val("");
            $("#divContrato").show();
        };
    }

    $(".radioRestricao").change(function () {
        validaPesquisaRestricao();
    });
</script>

