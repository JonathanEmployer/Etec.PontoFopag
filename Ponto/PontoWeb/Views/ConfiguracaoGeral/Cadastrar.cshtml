@model Modelo.ConfiguracoesGerais

@{
    ViewBag.Title = "Cadastrar Configurações Gerais";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="divCenterPequeno">
        <div class="panel panel-default">
            <div class="panel-heading salvando">
                @Html.ActionLink("X", "Index", "Home", null, new { @class = "close" })
                <h3 class="panel-title titulo-pagina">@ViewBag.Title</h3>
            </div>
            <div class="panel-body panelConteudo" id="panelBodyMaximo">
                @Html.HiddenFor(m => m.TestarEmail)
                @Html.HiddenFor(m => m.Salvando)
                @Html.ValidationMessage("CustomError")
                <div class="col-md-9">
                    <div class="panel panel-default">
                        <div class="panel-heading" style="padding-top:1px; padding-bottom:0px">
                            <div class="row">
                                <div class="col-md-12">
                                    <label class="control-label label-sm">Data para fechamento do ponto</label>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-3 ">
                                    <div class="form-group input-group-sm">
                                        @Html.LabelFor(model => model.DataInicial, new { @class = "control-label label-sm" })
                                        @Html.TextBoxFor(model => model.DataInicial, new { @class = "form-control input-sm", onkeypress = "return apenasNumero(event)", type = "number" })
                                        @Html.ValidationMessageFor(model => model.DataInicial)
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group input-group-sm">
                                        @Html.LabelFor(model => model.DataFinal, new { @class = "control-label label-sm" })
                                        @Html.TextBoxFor(model => model.DataFinal, new { @class = "form-control input-sm", onkeypress = "return apenasNumero(event)", type = "number" })
                                        @Html.ValidationMessageFor(model => model.DataFinal)
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(model => model.MudarPeriodoAposDataFinal)
                                        @Html.LabelFor(model => model.MudarPeriodoAposDataFinal, new { @class = "control-label label-sm" })
                                        @Html.ValidationMessageFor(model => model.MudarPeriodoAposDataFinal)
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <p></p>
                    <div class="panel panel-default">
                        <div class="panel-heading" style="padding-top:1px; ">
                            <div class="row">
                                <div class="col-md-12">
                                    <label class="control-label label-sm">E-mail</label>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div>
                                <div class="col-md-6">
                                    <div class="form-group input-group-sm">
                                        @Html.LabelFor(model => model.Email, new { @class = "control-label label-sm" })
                                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control input-sm" })
                                        @Html.ValidationMessageFor(model => model.Email)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group input-group-sm">
                                        @Html.LabelFor(model => model.SenhaEmail, new { @class = "control-label label-sm" })
                                        @Html.PasswordFor(model => model.SenhaEmail, new { @class = "form-control input-sm", value = Model.SenhaEmail })
                                        @Html.ValidationMessageFor(model => model.SenhaEmail)
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div class="col-md-6">
                                    <div class="form-group input-group-sm">
                                        @Html.LabelFor(model => model.SMTP, new { @class = "control-label label-sm" })
                                        @Html.TextBoxFor(model => model.SMTP, new { @class = "form-control input-sm" })
                                        @Html.ValidationMessageFor(model => model.SMTP)
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group input-group-sm">
                                        @Html.LabelFor(model => model.Porta, new { @class = "control-label label-sm" })
                                        @Html.TextBoxFor(model => model.Porta, new { @class = "form-control input-sm" })
                                        @Html.ValidationMessageFor(model => model.Porta)
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <label></label>
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor(model => model.SSL)
                                            @Html.LabelFor(model => model.SSL, new { @class = "control-label label-sm" })
                                            @Html.ValidationMessageFor(model => model.SSL)
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-md-3">
                    <div class="well" style="padding-top:5px; padding-bottom:5px;">
                        <div class="row table-bordered" style="background-color: white; padding-top: 5px; padding-bottom: 5px;">
                            <div>
                                <div class="row" style="padding-bottom:5px;">
                                    <div class="col-md-12">
                                        <div class="col-md-12" style="text-align:center">
                                            <canvas id="meuCanvas" width="640" height="480" class="hidden"></canvas>
                                            <img id="imgFunc" alt="Foto" class="img-responsive img-thumbnail" src="data:image/jpg;base64,@Model.LogoEmpresa" />
                                            @Html.ValidationMessageFor(model => model.LogoEmpresa)
                                            @Html.HiddenFor(model => model.LogoEmpresa, new { id = "base" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row" style="text-align:center">
                                    <span class="btn btn-primary btn-sm btn-file">
                                        <span class="glyphicon glyphicon-folder-open"></span>
                                        <input type="file" name="imgUp" value="" id="imgUp" data-errormsg="Tipo de imagem incorreta!">
                                    </span>
                                    <button class="btn btn btn-danger btn-sm" type="button" id="imgDelete"><span class="glyphicon glyphicon-trash"></span></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.IntegrarSalarioFuncionario)
                                @Html.LabelFor(model => model.IntegrarSalarioFuncionario, new { @class = "control-label label-sm" })
                                @Html.ValidationMessageFor(model => model.IntegrarSalarioFuncionario)
                            </label>
                        </div>
                    </div>
                </div>
                <p></p>
                <div class="col-md-12">
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TipoHorarioPadraoFunc, new { @class = "control-label label-sm" })
                            @Html.DropDownListFor(model => model.TipoHorarioPadraoFunc, cwkPontoWeb.Models.Helpers.EnumHelper.GetSelectedItemList<Modelo.Listas.TipoHorario>(1), new { @class = "form-control input-sm", style = "height: 25px;" })
                            @Html.HiddenFor(model => model.TipoHorarioPadraoFunc)
                            @Html.ValidationMessageFor(model => model.TipoHorarioPadraoFunc)
                        </div>
                    </div>
                    <div class="col-md-10">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Horario, new { @class = "control-label label-sm" })
                            <div class="input-group input-group-sm">
                                @Html.TextBoxFor(model => model.Horario, new { @class = "form-control  input-sm", id = "lkpHorario" })
                                <span class="input-group-btn">
                                    <button class="btn btn-primary" id="btnHorario" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                </span>
                            </div>
                            @Html.HiddenFor(model => model.Horario)
                            @Html.ValidationMessageFor(model => model.Horario)
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-md-6">
                        <div style="text-align: left">
                            <button type="button" class="btn btn-primary salvando desabilitar" id="btnTesteEmail">
                                <span class="glyphicon glyphicon-send"></span> &nbsp;Testar Envio de E-mail&nbsp;&nbsp;
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div style="text-align: right">
                            <button type="button" class="btn btn-success salvando desabilitar" id="btnSalvar">
                                <span class="glyphicon glyphicon-ok-circle"></span> &nbsp;Salvar&nbsp;&nbsp;
                            </button>
                            <a class="btn btn-danger"
                               href="@Url.Action("Index", "Home")">
                                <span class="glyphicon glyphicon-remove salvando"></span> Cancelar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ModelEnviando" class="modal">
                <div style="height: 200px; width: 400px; position: fixed; left: 45%; top: 40%; margin-left:-55px; margin-top:-90px">
                    <h2><label class="label label-primary">Enviando E-mail</label></h2>
                </div>
                <div style="height: 200px; width: 400px; position: fixed; left: 45%; top: 40%; margin: -25px 0 0 -25px; z-index: 9999998; overflow-y: hidden">
                    <div id="circularG" style="text-align:center;">
                        <div id="circularG_1" class="circularG">
                        </div>
                        <div id="circularG_2" class="circularG">
                        </div>
                        <div id="circularG_3" class="circularG">
                        </div>
                        <div id="circularG_4" class="circularG">
                        </div>
                        <div id="circularG_5" class="circularG">
                        </div>
                        <div id="circularG_6" class="circularG">
                        </div>
                        <div id="circularG_7" class="circularG">
                        </div>
                        <div id="circularG_8" class="circularG">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}


<script>
    $(document).ready(function () {
        cwk_EventoConsulta("#btnHorario", "#lkpHorario", "EventoConsulta", "Horario", "#TipoHorarioPadraoFunc");
    });
    $("#TipoHorarioPadraoFunc").change(function () {
        $("#lkpHorario").val('');
    });
    $('#btnTesteEmail').click(function (e) {
        bootbox.dialog({
            message: "Para testar o e-mail as informações serão salvas!",
            title: "Deseja Continuar?",
            buttons: {
                success: {
                    label: "Sim",
                    className: "btn-success",
                    callback: function () {
                        TestarSalvar();
                    }
                },
                danger: {
                    label: "Não",
                    className: "btn-danger",
                    callback: function () {
                    }
                }
            }
        });
    });

    $('#btnSalvar').click(function () {
        if ((($("#Email").val() != "" && $("#Email").val() != null) &&
            ($("#SMTP").val() != "" && $("#SMTP").val() != null) &&
            ($("#Porta").val() != "" && $("#Porta").val() != null && $("#Porta").val() > 0) &&
            ($("#SenhaEmail").val() != "" && $("#SenhaEmail").val() != null)
           ) &&
            ('@ViewBag.Email' != $("#Email").val() ||
             '@ViewBag.SMTP' != $("#SMTP").val() ||
             ('@ViewBag.SSL').toLowerCase() != $("#SSL").is(':checked').toString().toLowerCase() ||
             '@ViewBag.Porta' != $("#Porta").val() ||
             '@ViewBag.SenhaEmail' != $("#SenhaEmail").val())) {
            bootbox.dialog({
                message: "Deseja enviar um e-mail de teste para validar a nova configuração?",
                title: "Configuração de e-mail alterada.",
                buttons: {
                    success: {
                        label: "Sim",
                        className: "btn-success",
                        callback: function () {
                            $("#Salvando").val(true);
                            TestarSalvar();
                        }
                    },
                    danger: {
                        label: "Não",
                        className: "btn-danger",
                        callback: function () {
                            SalvarSemTestar()
                        }
                    }
                }
            });
        }
        else {
            SalvarSemTestar();
        }
    });

    function TestarSalvar() {
        $("#TestarEmail").val(true);
        $("#ModelEnviando").modal('show');
        $('form').submit();
    }
    function SalvarSemTestar() {
        $("#TestarEmail").val(false);
        $('form').submit();
    }
    $("#imgUp").change(function () {
        readImage(this)
    });

    function verificaTamanhoImagem(img, arquivo) {
        $(img).one("load", function () {
            var size = 0;
            if (typeof arquivo.files !== 'undefined') {
                size = arquivo.files[0].size;
            }
            //sizemaximo = 1MB para upload de imagem.
            if ((size > 1048576)) {
                mboxResizeImage(img, size);
            } else {
                mudaPropriedade('#imgFunc', 'src', img.src);
                $('#base').val(img.src);
            }
        }).each(function () {
            if (this.complete) $(this).load();
        });
    }

    /*Funções js para carregar imagem*/
    function readImage(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            var img = new Image();

            reader.onload = function (e) {
                $(img).attr('src', e.target.result);
                $(img).prop('src', e.target.result);
                verificaTamanhoImagem(img, input);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

    function mboxResizeImage(img, tamanho) {
        var tamanhoMb = ((tamanho / 1024) / 1024).toFixed(3);
        var msg = "Tamanho máximo permitido (1 MB) para imagem foi excedido, a imagem possui " + tamanhoMb + " MB, Deseja redimensionar?";
        return messageBoxYesNoOption(msg, "Confirmação", "Sim", "Não",
        function () {
            resizeImage(img);
        },
        function () {
            mudaPropriedade('#imgUp', 'value', "");
        });
    }

    function resizeImage(img) {
        var widthMaximo = 1024;
        var perc = (widthMaximo * 100) / img.width;
        var wid = ((img.width * perc) / 100);
        var heig = ((img.height * perc) / 100);

        var newDataUri = newImageToDataUrl(img, wid, heig);

        mudaPropriedade('#imgFunc', 'src', newDataUri);
        $('#base').val(newDataUri);
    }

    function newImageToDataUrl(img, width, height) {
        var canvas = document.getElementById('meuCanvas');
        canvas.setAttribute("width", width);
        canvas.setAttribute("height", height);

        ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, width, height);
        return canvas.toDataURL("image/jpeg");
    }


    $("#imgDelete").click(function () {
        if (confirm('Deseja realmente excluir a foto?')) {
            var imagemVazia = base64ToDataUri("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");

            mudaPropriedade('#imgFunc', 'src', imagemVazia);
            $('#base').val(imagemVazia);

        }
    });

    function mudaPropriedade(idComponente, prop, valor) {
        $(idComponente).attr(prop, valor);
        $(idComponente).prop(prop, valor);
    }

    function base64ToDataUri(base64) {
        return 'data:image/png;base64,' + base64;
    }
    /*Fim Funções js para carregar imagem*/
</script>

@if (Model.TestarEmail)
{
    if (Model.RetornoEmail.StatusEnvio >= 0)
    {
        if (Model.RetornoEmail.StatusEnvio == 2)
        {
            <script type="text/javascript">
                cwkErroTit("Falha ao Enviar E-mail","Verifique as Configurações do E-Mail, Detalhes: " + "@Model.RetornoEmail.DescFalha.Replace(System.Environment.NewLine, "")");
            </script>
        }
        else
        {
            <script type="text/javascript">
                bootbox.dialog({
                    message: "Deseja fechar a página de configuração?",
                    title: "E-mail configurado com sucesso!",
                    buttons: {
                        success: {
                            label: "Fechar",
                            className: "btn-success",
                            callback: function () {
                                window.location.href = '@Url.Action("Index", "Home")';
                            }
                        },
                        danger: {
                            label: "Continuar",
                            className: "btn-primary",
                            callback: function () {

                            }
                        }
                    }
                });

            </script>
        }
    }
}

@if (ViewBag.Consultar == 1)
{
    <script>
        $(document).ready(function () {
            $('form').find('input, textarea, button, select').attr('disabled', 'disabled');
        })
    </script>
}