@model Modelo.Funcionario
@using PontoWeb.Helpers
@{
    ViewBag.Title = "Cadastrar Funcionário";
    bool integrado = false;
    if (Model.idIntegracao.GetValueOrDefault() > 0 && ViewBag.BloqueiaDadosIntegrados)
    {
        integrado = true;
    }
}

@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.Id, new { id = "idFuncionario" });
    @Html.HiddenFor(model => model.Codigo);
    @Html.HiddenFor(model => model.Incdata);
    @Html.HiddenFor(model => model.Inchora);
    @Html.HiddenFor(model => model.Incusuario);

    @Html.HiddenFor(model => model.Altdata);
    @Html.HiddenFor(model => model.Althora);
    @Html.HiddenFor(model => model.Altusuario);
    @Html.HiddenFor(model => model.Funcionarioativo_Ant);
    @Html.HiddenFor(model => model.Naoentrarbanco_Ant);
    @Html.HiddenFor(model => model.Naoentrarcompensacao_Ant);
    @Html.HiddenFor(model => model.Iddepartamento_Ant);
    @Html.HiddenFor(model => model.Idempresa_Ant);
    @Html.HiddenFor(model => model.Idfuncao_Ant);
    @Html.HiddenFor(model => model.Dataadmissao_Ant);
    @Html.HiddenFor(model => model.Datademissao_Ant);
    @Html.HiddenFor(model => model.ToleranciaEntrada);
    @Html.HiddenFor(model => model.ToleranciaSaida);
    @Html.HiddenFor(model => model.QuantidadeTickets);
    @Html.HiddenFor(model => model.TipoTickets);
    @Html.HiddenFor(model => model.Excluido);
    @Html.HiddenFor(model => model.Jornada);
    @Html.HiddenFor(model => model.idIntegracao);
    @Html.HiddenFor(model => model.DataUltimoFechamento);
    @Html.HiddenFor(model => model.IdIntegracaoPainel);
    @Html.HiddenFor(model => model.RFID_Ant);
    @Html.HiddenFor(model => model.IdHorarioDinamico);
    @Html.HiddenFor(model => model.Idhorario);
    if (ViewBag.Disabled)
    {
        @Html.HiddenFor(model => model.CicloSequenciaIndice);
    }

    <div class="divCenter">
        <div class="panel panel-default" style="padding:0; margin-bottom:0">
            <div class="panel-heading salvando">
                @Html.ActionLink("X", "Grid", "Funcionario", null, new { @class = "close" })
                <h3 class="panel-title titulo-pagina">Cadastro de Funcionário</h3>
            </div>
            <div class="panel-body panelConteudo" id="panelBodyFixodivCenter">
                @Html.ValidationMessage("CustomError")
                @if (!String.IsNullOrEmpty(@ViewBag.MensagemFechamento))
                {
                    <div class="alert alert-info" role="alert" style="margin-bottom:0">@Html.Raw(ViewBag.MensagemFechamento)</div>
                }


                <div id="Tabs" role="tabpanel">
                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs" role="tablist">
                        <li class="active">
                            <a href="#funcionario" aria-controls="funcionario" role="tab" data-toggle="tab">Funcionário</a>
                        </li>
                        <li><a href="#rep" aria-controls="rep" role="tab" data-toggle="tab">REP</a></li>
                    </ul>
                    <!-- Tab panes -->
                    <div class="tab-content" style="padding-top: 20px">
                        <div role="tabpanel" class="tab-pane active" id="funcionario">
                            <div class="row">
                                <div class="col-md-9" style="padding-right:0">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Dscodigo, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Dscodigo, ViewBag.Disabled ? (object)new { @class = "form-control  input-sm", @disabled = true } : new { @class = "form-control  input-sm", @autofocus = "autofocus" }).IsReadonly(integrado)
                                                @Html.HiddenFor(model => model.Dscodigo)
                                                @Html.ValidationMessageFor(model => model.Dscodigo)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Codigofolha, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Codigofolha, ViewBag.Disabled ? (object)new { @class = "form-control  input-sm", @autofocus = "autofocus" } : new { @class = "form-control  input-sm" }).IsReadonly(integrado)
                                                @Html.ValidationMessageFor(model => model.Codigofolha)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Matricula, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Matricula, new { @class = "form-control  input-sm" }).IsReadonly(integrado)
                                                @Html.ValidationMessageFor(model => model.Matricula)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Carteira, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Carteira, new { @class = "form-control  input-sm" }).IsReadonly(integrado)
                                                @Html.ValidationMessageFor(model => model.Carteira)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Pis, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Pis, new { @class = "form-control  input-sm pis" }).IsReadonly(integrado)
                                                @Html.ValidationMessageFor(model => model.Pis)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CPF, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.CPF, new { @class = "form-control  input-sm cpf" }).IsReadonly(integrado)
                                                @Html.ValidationMessageFor(model => model.CPF)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Salario, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    <span class="input-group-addon">R$</span>
                                                    @Html.TextBoxFor(model => model.Salario, new { @class = "form-control  input-sm money" }).IsReadonly(integrado)
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Salario)
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Email, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control  input-sm" })
                                                @Html.ValidationMessageFor(model => model.Email)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-8">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Nome, new { @class = "control-label label-sm" })
                                                @Html.TextBoxFor(model => model.Nome, new { @class = "form-control  input-sm" }).IsReadonly(integrado)
                                                @Html.ValidationMessageFor(model => model.Nome)
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group input-group-sm">
                                                @Html.LabelFor(model => model.Dataadmissao, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Dataadmissao, new { @class = "form-control input-sm MascDate datepickerfunc", id = "dtAdmissao" }).IsReadonly((Model.Dataadmissao == null ? DateTime.MaxValue : Model.Dataadmissao) <= Model.DataUltimoFechamento).IsReadonly(integrado)
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnAdmissao" type="button" @(((Model.Dataadmissao == null ? DateTime.MaxValue : Model.Dataadmissao) <= Model.DataUltimoFechamento) == true ? "disabled" : "")><span class="glyphicon glyphicon-calendar"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Dataadmissao)
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group input-group-sm">
                                                @Html.LabelFor(model => model.Datademissao, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Datademissao, new { @class = "form-control input-sm MascDate datepickerfunc", id = "dtDemissao" }).IsDisabled((Model.Datademissao == null ? DateTime.MaxValue : Model.Datademissao) <= Model.DataUltimoFechamento).IsReadonly(integrado)
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnDemissao" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Datademissao)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Empresa, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Empresa, new { @class = "form-control  input-sm", id = "lkpEmpresa" }).IsReadonly(integrado)
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnEmpresa" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Empresa)
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Departamento, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Departamento, new { @class = "form-control  input-sm", id = "lkpDepart" }).IsReadonly(integrado)
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnDepart" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Departamento)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Funcao, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Funcao, new { @class = "form-control  input-sm", id = "lkpFuncao" }).IsReadonly(integrado)
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnFuncao" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Funcao)
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Tipohorario, new { @class = "control-label label-sm" })
                                                @Html.DropDownListFor(model => model.Tipohorario, cwkPontoWeb.Models.Helpers.EnumHelper.GetSelectedItemList<Modelo.Listas.TipoHorario>(1), ViewBag.Disabled ? (object)new { @class = "form-control input-sm", @disabled = true, style = "height: 25px;" } : new { @class = "form-control input-sm", style = "height: 25px;" })
                                                @Html.HiddenFor(model => model.Tipohorario)
                                                @Html.ValidationMessageFor(model => model.Tipohorario)
                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <div id="divHorario">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Horario, new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => model.Horario, ViewBag.Disabled ? (object)new { @class = "form-control  input-sm", @disabled = true, id = "lkpHorario" } : new { @class = "form-control  input-sm", id = "lkpHorario" })
                                                        <span class="input-group-btn">
                                                            @if (ViewBag.Disabled)
                                                            {
                                                                <button class="btn btn-primary" id="btnHorario" type="button" disabled><span class="glyphicon glyphicon-search"></span></button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-primary" id="btnHorario" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                            }
                                                        </span>
                                                    </div>
                                                    @Html.HiddenFor(model => model.Horario)
                                                    @Html.ValidationMessageFor(model => model.Horario)
                                                </div>
                                            </div>
                                            <div id="divHorarioDinamico">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.HorarioDinamico, new { @class = "control-label label-sm" })
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => model.HorarioDinamico, ViewBag.Disabled ? (object)new { @class = "form-control  input-sm", @disabled = true, id = "lkpHorarioDinamico" } : new { @class = "form-control  input-sm", id = "lkpHorarioDinamico" })
                                                        <span class="input-group-btn">
                                                            @if (ViewBag.Disabled)
                                                            {
                                                                <button class="btn btn-primary" id="btnHorarioDinamico" type="button" disabled><span class="glyphicon glyphicon-search"></span></button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-primary" id="btnHorarioDinamico" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                            }
                                                        </span>
                                                    </div>
                                                    @Html.HiddenFor(model => model.HorarioDinamico)
                                                    @Html.ValidationMessageFor(model => model.HorarioDinamico)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            @Html.ValidationMessageFor(model => model.CicloSequenciaIndice)
                                        </div>
                                        <div class="col-md-12" id="divHorarioDinamicoDetalhes">

                                        </div>
                                    </div>
                                    <div class="row">
                                        @if (ViewBag.RegistradorEmpresa)
                                        {
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Mob_Senha, new { @class = "control-label label-sm" })
                                                    @Html.PasswordFor(model => model.Mob_Senha, new { @class = "form-control  input-sm", value = Model.Mob_Senha })
                                                    @Html.ValidationMessageFor(model => model.Mob_Senha)
                                                </div>
                                            </div>
                                        }
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Supervisor, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Supervisor, new { @class = "form-control  input-sm", id = "lkpSupervisor" })
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnSupervisor" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Supervisor)
                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.PessoaSupervisor, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.PessoaSupervisor, new { @class = "form-control  input-sm", id = "lkpPessoaSupervisor" }).IsReadonly(integrado)
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnPessoaSupervisor" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.PessoaSupervisor)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-7">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Alocacao, new { @class = "control-label label-sm" })
                                                <div class="input-group input-group-sm">
                                                    @Html.TextBoxFor(model => model.Alocacao, new { @class = "form-control  input-sm", id = "lkpAlocacao" })
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-primary" id="btnAlocacao" type="button"><span class="glyphicon glyphicon-search"></span></button>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Alocacao)
                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TipoVinculo, new { @class = "control-label label-sm" })
                                                @Html.DropDownListFor(model => model.IdTipoVinculo, new SelectList(ViewBag.Campos, "Value", "Text", Model.IdTipoVinculo == null ? 0 : Model.IdTipoVinculo), new { @class = "form-control input-sm comboSearch", style = "height: 25px;" })
                                                @Html.ValidationMessageFor(model => model.IdTipoVinculo)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class=" col-md-6">
                                            <div class="panel panel-default" style="margin-bottom:4px">
                                                <div class="panel-heading" style="padding-top:1px; padding-bottom:2px">
                                                    @Html.LabelFor(model => model.TipoMaoObra, new { @class = "label-sm" }) &nbsp;
                                                </div>
                                                <div class="panel-body" style="padding-top:8px; padding-bottom:5px">
                                                    <div class="radio-inline" data-toggle="radioTipo" style="margin-top:-4px">
                                                        @Html.RadioButtonFor(model => model.TipoMaoObra, 0, new { id = "idRadioDireta", name = "rdioTipo" })
                                                        <label class="label-sm" for="idRadioDireta">Direta</label>
                                                    </div>
                                                    <div class="radio-inline" data-toggle="radioTipo" style="margin-top:-4px">
                                                        @Html.RadioButtonFor(model => model.TipoMaoObra, 1, new { id = "idRadioIndireta", name = "rdioTipo" })
                                                        <label class="label-sm" for="idRadioIndireta">Indireta</label>
                                                    </div>
                                                    <div class="radio-inline" data-toggle="radioTipo" style="margin-top:-4px">
                                                        @Html.RadioButtonFor(model => model.TipoMaoObra, 2, new { id = "idRadiomensalista", name = "rdioTipo" })
                                                        <label class="label-sm" for="idRadioMensalista">Mensalista</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">  </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="well" style="padding-top:5px; padding-bottom:5px;">
                                        <div class="row table-bordered" style="background-color: white; padding-top: 5px; padding-bottom: 5px;">
                                            <div>
                                                <div class="row" style="padding-bottom:5px;">
                                                    <div class="col-md-12">
                                                        <div class="col-md-12" style="text-align:center">
                                                            <canvas id="meuCanvas" width="640" height="480" class="hidden"></canvas>
                                                            <img id="imgFunc" alt="Foto" class="img-responsive img-thumbnail" src="data:image/jpg;base64,@Model.Foto" />
                                                            @Html.ValidationMessageFor(model => model.Foto)
                                                            @Html.HiddenFor(model => model.Foto, new { id = "base" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row" style="text-align:center">
                                                    <span class="btn btn-primary btn-sm btn-file">
                                                        <span class="glyphicon glyphicon-folder-open"></span>
                                                        <input type="file" name="imgUp" value="" id="imgUp" data-errormsg="Tipo de imagem incorreta!">
                                                    </span>
                                                    <button class="btn btn btn-danger btn-sm" type="button" id="imgDelete"><span class="glyphicon glyphicon-trash"></span></button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div style="padding-left:7px">
                                                    <div class="checkbox">
                                                        @Html.CheckBoxFor(model => model.bFuncionarioativo)
                                                        @Html.LabelFor(model => model.bFuncionarioativo, new { @class = "control-label label-sm" })
                                                    </div>
                                                    <div class="checkbox">
                                                        @if ((Model.Dataadmissao == null ? DateTime.MaxValue : Model.Dataadmissao) <= Model.DataUltimoFechamento)
                                                        {
                                                            @Html.CheckBoxDisabledFor(model => model.bNaoentrarbanco.ToString())
                                                        }
                                                        else
                                                        {
                                                            @Html.CheckBoxFor(model => model.bNaoentrarbanco)
                                                        }
                                                        @Html.LabelFor(model => model.bNaoentrarbanco, new { @class = "control-label label-sm" })
                                                    </div>
                                                    <div class="checkbox">
                                                        @if ((Model.Dataadmissao == null ? DateTime.MaxValue : Model.Dataadmissao) <= Model.DataUltimoFechamento)
                                                        {
                                                            @Html.CheckBoxDisabledFor(model => model.bNaoentrarcompensacao.ToString())
                                                        }
                                                        else
                                                        {
                                                            @Html.CheckBoxFor(model => model.bNaoentrarcompensacao)
                                                        }
                                                        @Html.LabelFor(model => model.bNaoentrarcompensacao, new { @class = "control-label label-sm" })
                                                    </div>
                                                    @if (ViewBag.RegistradorEmpresa)
                                                    {
                                                        <div class="checkbox">
                                                            @Html.CheckBoxFor(model => model.utilizaregistrador)
                                                            @Html.LabelFor(model => model.utilizaregistrador, new { @class = "control-label label-sm" })
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Campoobservacao, new { @class = "control-label label-sm" })
                                                @Html.TextAreaFor(model => model.Campoobservacao, new { @class = "form-control  input-sm" })
                                                @Html.ValidationMessageFor(model => model.Campoobservacao)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane" id="rep">
                            <div class="row">
                                <div class=" col-md-6">
                                    <div id="partialViewContainerDiv">
                                        @Html.Partial("FuncionarioRFID", Model)
                                    </div>
                                </div>
                                <div class=" col-md-6">
                                    <div class="panel panel-default" style="margin-bottom:4px">
                                        <div class="panel-heading" style="padding-top:1px; padding-bottom:2px">
                                            @Html.LabelFor(model => model.Biometrias, new { @class = "control-label label-sm" })
                                        </div>
                                        <div class="panel-body" style="padding-top:8px; padding-bottom:5px">
                                            @foreach (var b in Model.Biometrias)
                                            {
                                                <div class="row" style="padding-bottom:8px;">
                                                    <div class="form-group">
                                                        <div class="form-inline">
                                                            <div class="col-sm-12">
                                                                <div class="form-group">
                                                                    @Html.LabelFor(m => b.Quantidade, new { @class = "control-label label-sm" })
                                                                    @Html.TextBoxFor(m => b.Quantidade, new { @class = "disabled form-control input-sm", disabled = "disabled"@*, @style = "width: 40px"*@})
                                                                </div>
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => b.Tecnologia, new { @class = "disabled form-control input-sm", disabled = "disabled" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.Biometrias == null || Model.Biometrias.Count == 0)
                                            {
                                                <label> Nenhum registro encontrado </label>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">  </div>
                        </div>
                    </div>
                </div>


            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-12 center-block">
                        <div style="text-align: right">
                            <button type="submit" class="btn btn-success salvando">
                                <span class="glyphicon glyphicon-ok-circle"></span> &nbsp;Salvar&nbsp;&nbsp;
                            </button>
                            <a id="fechar" class="btn btn-danger"
                               href="@Url.Action("grid", "Funcionario")">
                                <span class="glyphicon glyphicon-remove salvando"></span> Cancelar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal_block modal_part"></div>
        <div class="modal_dialog modal_part" id="tn_select"></div>
    </div>
}
<script>
    function addRow(idfuncionario) {
        var senha = $('#txtSenha').val();
        var cracha = Number($('#lkpHistorioRFID').val());
        var rd = $("input[name=rdioTipo]:checked").val();
        if (rd == 0) {
            if (($('#lkpHistorioRFID').val().length) > 8)
            {
                $('#vsRfid').removeClass('field-validation-valid');
                $('#vsRfid').addClass('field-validation-error');
                $('#vsRfid').html('(RFID) Tamanho máximo 8 caracteres');
                return false;
            }
        }
        else if (rd == 1) {
            if (($('#lkpHistorioRFID').val().length) < 10)
            {    
                $('#vsRfid').removeClass('field-validation-valid');
                $('#vsRfid').addClass('field-validation-error');
                $('#vsRfid').html('(MIFARE) Tamanho mínimo 10 caracteres');
                return false;
            }
       
        }
        if ((cracha === '' || cracha === 0) || ($("input[name=rdioTipo]:checked").val() != '0' && $("input[name=rdioTipo]:checked").val() != '1')) {
            //if (senha === '') {
            //    $('#txtSenha').addClass('input-validation-error');
            //    $('#vsSenha').removeClass('field-validation-valid');
            //    $('#vsSenha').addClass('field-validation-error');
            //    $('#vsSenha').html('Campo obrigatório');
            //    $('#txtSenha').focus();
            //}
            if (cracha === '' || cracha === 0) {
                $('#lkpHistorioRFID').addClass('input-validation-error');
                $('#vsRfid').removeClass('field-validation-valid');
                $('#vsRfid').addClass('field-validation-error');
                $('#vsRfid').html('Campo obrigatório');
                $('#lkpHistorioRFID').val('');
                $('#lkpHistorioRFID').focus();
            }
            if ($("input[name=rdioTipo]:checked").val() != '0' && $("input[name=rdioTipo]:checked").val() != '1') {
                $('#vsTipo').removeClass('field-validation-valid');
                $('#vsTipo').addClass('field-validation-error');
                $('#vsTipo').html('Campo obrigatório');
            }
            return false;
        }
        else {
            $('#txtSenha').removeClass('input-validation-error');
            $('#vsSenha').addClass('field-validation-valid');
            $('#vsSenha').removeClass('field-validation-error');

            $('#lkpHistorioRFID').removeClass('input-validation-error');
            $('#vsTipo').addClass('field-validation-valid');
            $('#vsTipo').removeClass('field-validation-error');

            $.ajax({
                url: "/Funcionario/AdicionarFuncionarioRFID",
                type: "GET",
                beforeSend: function () {
                    $("#loading").modal();
                },
                data: {
                    idfuncionario,
                    Senha: document.getElementById('txtSenha').value,
                    Cracha: document.getElementById('lkpHistorioRFID').value,
                    TipoCracha: $("input[name=rdioTipo]:checked").val()
                },
                dataType: 'html',
                success: function (result) {
                    $('#partialViewContainerDiv').html(result);
                    $('#txtSenha').val('').focus();
                },
                complete: function () {
                    $("#loading").modal('hide')
                }
            });
        }
    }

    function deleteRow(idfuncionario, idrfid) {
        if (confirm('Deseja realmente excluir este crachá?')) {
            $.ajax({
                url: "/Funcionario/InativarFuncionarioRFID",
                type: "GET",
                data: { idfuncionario, idrfid },
                dataType: 'html',
                beforeSend: function () {
                    $("#loading").modal();
                },
                success: function (result) {
                    $('#partialViewContainerDiv').html(result);
                },
                complete: function () {
                    $("#loading").modal('hide')
                }
            })
        }
    }

    $(document).on('click', '#btnHistoricoRFID', function () {
        var idfuncionario = $('#idFuncionario').val();
        cwk_CadastroAjaxParam('Grid', 'FuncionarioRFID', $('#idFuncionario').val(), "", "");
    });

    $(document).ready(function () {
        cwk_EventoConsulta("#btnDepart",            "#lkpDepart",           "EventoConsulta",   "Departamento",                     "#lkpEmpresa");
        cwk_EventoConsulta("#btnEmpresa",           "#lkpEmpresa",          "EventoConsulta",   "Empresa",                          "");
        cwk_EventoConsulta("#btnFuncao",            "#lkpFuncao",           "EventoConsulta",   "Funcao",                           "");
        cwk_EventoConsulta("#btnAlocacao",          "#lkpAlocacao",         "EventoConsulta",   "Alocacao",                         "")
        cwk_EventoConsulta("#btnTipoVinculo",       "#lkpTipoVinculo",      "EventoConsulta",   "TipoVinculo",                      "")
        cwk_EventoConsulta("#btnHorario", "#lkpHorario", "EventoConsulta", "Horario", "#Tipohorario");
        cwk_EventoConsulta("#btnHorarioDinamico", "#lkpHorarioDinamico", "EventoConsulta", "HorarioDinamico", "", GetHorarioDinamico);
        cwk_EventoConsulta("#btnSupervisor",        "#lkpSupervisor",       "EventoConsulta",   "Usuario",                          "");
        cwk_EventoConsulta("#btnPessoaSupervisor",  "#lkpPessoaSupervisor", "EventoConsulta",   "Pessoa",                           "");
        ValidaTipoHorario();
        GetHorarioDinamico();

        cwk_DataCalendario('#btnAdmissao', '#dtAdmissao');
        cwk_DataCalendario('#btnDemissao', '#dtDemissao');

        Ajax_CarregaGridParametro('Grid', 'FuncionarioHistorico', $('#idFuncionario').val(), '#gridHistorico');

        validaEdicaoSenhaMobile($("#utilizaregistrador").is(':checked'));
        $(function () {
            $('.nav-tabs a').on('click', function (e) {
                e.preventDefault();
                $(this).tab('show');
            });
        });

        var dtFechamento = '@Model.DataUltimoFechamento';
        dtFechamento = ConvertDate(dtFechamento);
        var optionsDP = new Array();
        optionsDP['language'] = 'pt-BR';
        optionsDP['format'] = "dd/mm/yyyy";
        optionsDP['todayBtn'] = "linked";
        optionsDP['autoclose'] = "true";
        optionsDP['todayHighlight'] = "true";
        optionsDP['startDate'] = dtFechamento.addDays(1);
        optionsDP['orientation'] = "auto";

        $('.datepickerfunc:enabled:not([readonly])').datepicker(optionsDP);
    });

    $("#utilizaregistrador").change(function () {
        validaEdicaoSenhaMobile($("#utilizaregistrador").is(':checked'));
    });

    function validaEdicaoSenhaMobile(bUtilizaRegistrador) {
        if (bUtilizaRegistrador) {
            $("#Mob_Senha").removeAttr("disabled");
        }
        else {
            $("#Mob_Senha").val("");
            $("#Mob_Senha").attr("disabled", true)
        }
    }

    $("#lkpEmpresa").change(function () {
        $('#lkpDepart').val('');
    });


    $("#imgUp").change(function () {
        readImage(this)
    });

    $("#Tipohorario").change(function () {
        $("#lkpHorario").val('');
    });
    function verificaTamanhoImagem(img) {
        $(img).one("load", function () {
            if ((img.height > 480) || (img.width > 640)) {
                mboxResizeImage(img);
            } else {
                mudaPropriedade('#imgFunc', 'src', img.src);
                $('#base').val(img.src);
            }
        }).each(function () {
            if (this.complete) $(this).load();
        });
    }


    /*Funções js para carregar imagem*/
    function readImage(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            var img = new Image();

            reader.onload = function (e) {
                $(img).attr('src', e.target.result);
                $(img).prop('src', e.target.result);
                verificaTamanhoImagem(img);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

    function mboxResizeImage(img) {
        var msg = "Tamanho máximo permitido para imagem foi excedido, Máximo permitido: Largura = 480, Altura: 640 ou Largura = 640, Altura: 480, Deseja redimensionar?";
        return messageBoxYesNoOption(msg, "Confirmação", "Sim", "Não",
        function () {
            resizeImage(img);
        },
        function () {
            mudaPropriedade('#imgUp', 'value', "");
        });
    }

    function resizeImage(img) {
        var newDataUri = newImageToDataUrl(img, "640", "480");

        mudaPropriedade('#imgFunc', 'src', newDataUri);
        $('#base').val(newDataUri);
    }

    function newImageToDataUrl(img, width, height) {
        var canvas = document.getElementById('meuCanvas'),
        ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, width, height);
        return canvas.toDataURL();
    }

    $("#imgDelete").click(function () {
        if (confirm('Deseja realmente excluir a foto?')) {
            var imagemVazia = base64ToDataUri("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");

            mudaPropriedade('#imgFunc', 'src', imagemVazia);
            $('#base').val(imagemVazia);

        }
    });

    function mudaPropriedade(idComponente, prop, valor) {
        $(idComponente).attr(prop, valor);
        $(idComponente).prop(prop, valor);
    }

    function base64ToDataUri(base64) {
        return 'data:image/png;base64,' + base64;
    }
    /*Fim Funções js para carregar imagem*/

    $("#btnInfoRFID").click(function () {
        cwkNotificacaoTit("Informação sobre o RFID","O envio do Crachá proximidade estão apenas disponíveis para os relógios da marca ControlID modelos IDX e IDCLASS e Henry modelos PRISMA SF Advanced, Hexa e Hexa ADV (desde que possuam a tecnologia), após informar ou alterar esta informação é necessário reenviar o registro do funcionário para o REP");
    });

    function ValidaTipoHorario() {
        $("#divHorario").hide();
        $("#divHorarioDinamico").hide();
        $("#divHorarioDinamicoDetalhes").hide();
        if ($("#Tipohorario").val() == 3 || $("#idHorarioDinamico").val() > 0) {
            $("#divHorarioDinamico").show();
            $("#divHorarioDinamicoDetalhes").show();
        }
        else {
            $("#divHorario").show();
        }
    }

    function GetHorarioDinamico() {
        var horario = $("#lkpHorarioDinamico").val();
        if (horario.length > 0) {
            var parametros = { horario: horario };
            CarregaDadosAjax('Selecionar', 'HorarioDinamico', parametros, '#divHorarioDinamicoDetalhes', null, DesabilitarHorarioDinamicoSelecao);
        }
    }

    $("#Tipohorario").change(function () {
        ValidaTipoHorario()
    })

    function DesabilitarHorarioDinamicoSelecao() {
        if ('@ViewBag.Disabled' === 'True') {
            $('#divHorarioDinamicoDetalhes').find('input, textarea, button, select, radio').prop("disabled", true);
        }
        if ('@Model.CicloSequenciaIndice'.length > 0) {
            $("input[name=CicloSequenciaIndice][value=" + @Model.CicloSequenciaIndice + "]").attr('checked', 'checked');
        }
    }
</script>


@if (ViewBag.Consultar == 1)
{
    <script>
        $(document).ready(function () {
            $('form').find('input, textarea, button, select').attr('disabled', 'disabled');
        })
    </script>
}

