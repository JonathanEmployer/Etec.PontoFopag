@model Modelo.Relatorios.RelatorioAfastamentoModel
@using System.Web.Optimization

@{
    ViewBag.Title = "Relatório de Afastamentos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Html.BeginForm("Ocorrencia", "RelatorioAfastamento", FormMethod.Post, new { target = "_blank" }))
{
    <div class="">
        <div class="panel panel-default" style="padding:0px;margin-bottom:0">
            <div class="panel-heading">
                @Html.ActionLink("X", "Index", "Home", null, new { @class = "close" })
                <h3 class="panel-title titulo-pagina">Relatório de Afastamentos</h3>
            </div>
            <div class="panel-body panelConteudo" id="panelBodyFixodivCenter">
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.TipoArquivo)
                @Html.HiddenFor(x => x.TipoSelecao)
                <div>
                    <div class="row" style="padding-bottom:5px;">
                        <div class="col-md-4">
                            <div class="panel panel-default">
                                <div class="panel-heading" style="padding-top:5px; padding-bottom:0px">
                                    <div class="row">
                                        <div class="col-md-2">
                                            @Html.LabelFor(model => model.TipoRelatorio, new { @class = "control-label label-sm" })
                                        </div>
                                        <div class="col-md-10">
                                            <div class="form-group input-group-sm">
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButtonFor(model => model.TipoRelatorio, 0, new { id = "rdbOco", name = "rdioTipoRel" })
                                                    <label class="label-sm" for="rdbOco">Ocorrência</label>
                                                </div>
                                                <div class="radio-inline" data-toggle="radio">
                                                    @Html.RadioButtonFor(model => model.TipoRelatorio, 1, new { id = "rdbPer", name = "rdioTipoRel" })
                                                    <label class="label-sm" for="rdbPer">Período</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="divOcorrencia" class="col-md-8">
                            <div class="panel panel-default">
                                <div class="panel-heading" style="padding-top:4px; padding-bottom:0px">
                                    <div class="row">
                                        <div class="col-md-2">
                                            @Html.LabelFor(model => model.OcorrenciaEscolhida, new { @class = "control-label label-sm" })
                                        </div>
                                        <div class="col-md-8">
                                            <div class="form-group input-group-sm">
                                                @Html.HiddenFor(model => model.Ocorrencias)
                                                @Html.DropDownListFor(model => model.Ocorrencia, new SelectList(Model.OcorrenciasAfastamento, "Id", "Descricao"), new { @class = "dropdown-toggle form-control input-sm" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="divPeriodo" class="col-md-8">
                            <div class="panel panel-default">
                                <div class="panel-heading" style="padding-top:5px; padding-bottom:5px">
                                    <div class="row">
                                        <div class="col-md-1">
                                            @Html.LabelFor(model => Model.InicioPeriodo, new { @class = "label-sm" })
                                        </div>
                                        <div class="col-md-3">
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => Model.InicioPeriodo, new { @class = "form-control input-sm MascDate datepickerpt", id = "InicioPeriodo" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-primary" id="btnDtInicio" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                                </span>
                                            </div>
                                        </div>
                                        @Html.ValidationMessageFor(model => Model.InicioPeriodo)
                                        <div class="col-md-1">
                                            @Html.LabelFor(model => Model.FimPeriodo, new { @class = "label-sm" })
                                        </div>
                                        <div class="col-md-3">
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => Model.FimPeriodo, new { @class = "form-control input-sm MascDate datepickerpt", id = "FimPeriodo" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-primary" id="btnDtFim" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                                </span>
                                            </div>
                                        </div>
                                        @Html.ValidationMessageFor(model => Model.FimPeriodo)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.HiddenFor(x => x.IdSelecionados)
                            @Html.ValidationMessageFor(x => x.IdSelecionados)
                            <div class="row">
                                @Html.GridFor("tbFun", (new Modelo.Proxy.pxyFuncionarioRelatorio()).GetType(), true, "GetFuncsRel", "GetFuns")
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.Partial("../JobManager/JobView")
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-12 center-block">
                        <div style="text-align: right">
                            <button type="submit" id="btnPdf" class="btn btn-primary btnEnviar"><span class="fa fa-file-pdf-o"></span>&nbsp;Gerar PDF</button>
                            <button type="submit" id="btnXls" class="btn btn-primary btnEnviar"><span class="fa fa-file-excel-o"></span>&nbsp;Gerar Excel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script>
    var errorArray = new Array();
    cwk_DataCalendario('#btnDtInicio', '#InicioPeriodo');
    cwk_DataCalendario('#btnDtFim', '#FimPeriodo');


    function retornaAltura() {
        var altura = cwk_AlturaTela() * 28 / 100;
        if (cwk_AlturaTela() <= 768) {
            altura = cwk_AlturaTela() * 18 / 100;
        }
        return altura;
    }


    $('#rdbOco').change(function () {
        escondePeriodo();
    });
    $('#rdbPer').change(function () {
        escondeOcorrencia();
    });

    function escondePeriodo() {
        $('#divPeriodo').hide();
        $('#divOcorrencia').show();
    };

    function escondeOcorrencia() {
        $('#divPeriodo').show();
        $('#divOcorrencia').hide();
    };

    $(document).ready(function () {
        $('#tbFun tbody').on('click', 'tr', function () {
            errorArray["IdSelecionados"] = null;
            $("form").validate().showErrors(errorArray);
        });
        if ($('#rdbOco').is(':checked')) {
            escondePeriodo();
        }
        else {
            escondeOcorrencia();
        }

    });

    function modificaProperties(componente, valor) {
        $(componente).prop('disabled', valor);
        $(componente).attr('disabled', valor);
        $(componente).prop('readonly', valor);
        $(componente).attr('readonly', valor);
    }

    $("#btnPdf").click(function (event) {
        if (!validaForm()) {
            event.preventDefault();
        }
        else {
            $("#TipoArquivo").val("PDF");
        }
    });

    $("#btnXls").click(function (event) {
        if (!validaForm()) {
            event.preventDefault();
        }
        else {
            $("#TipoArquivo").val("Excel");
        }
    });

    $('form').submit(function () {
        if ($(this).valid()) {
            PostFormJob(this);
        }
        return false;
    });

    function validaForm() {
        errorArray["IdSelecionados"] = null;
        $("form").validate().showErrors(errorArray);
        var retorno = true;
        $("#IdSelecionados").val(tbFunGetSelecionado());
        if ($("#IdSelecionados").val().length <= 0 || $("#IdSelecionados").val() == '' || $("#IdSelecionados").val() == null) {
            var msgErro = 'Para Imprimir o Relatório de Afastamento é Necessário Selecionar Pelo Menos um Funcionário.';
            errorArray["IdSelecionados"] = msgErro;
            cwkErro(msgErro);
            $("form").validate().showErrors(errorArray);
            retorno = false;
        }

        correnciaSelecionada = $('#Ocorrencia');
        if ($('#rdbOco').is(':checked') && (correnciaSelecionada.length == 0 || $(correnciaSelecionada).val() == "" || $(correnciaSelecionada).val() == null)) {
            var msgErro = 'Para Imprimir o Relatório de Afastamento é Necessário Selecionar Uma Ocorrência.';
            errorArray["Ocorrencia"] = msgErro;
            cwkErro(msgErro);
            $("form").validate().showErrors(errorArray);
            console.log('Erro ocorrencia');
            retorno = false;
        }
        return retorno;
    }

    function getSelecionados(seletorCheckbox) {
        var filtrados = $(seletorCheckbox).toArray().filter(function (item, index, array) {
            if ($(item).is(':checked')) {
                return item;
            }
        });
        return filtrados;
    }

</script>
