@model Modelo.Relatorios.RelatorioInconsistenciasModel
@using System.Web.Optimization

@{
    ViewBag.Title = "Relatório de Inconsistências";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="">
        <div class="panel panel-default" style="padding:0px;margin-bottom:0">
            <div class="panel-heading">
                @Html.ActionLink("X", "Index", "Home", null, new { @class = "close" })
                <h3 class="panel-title titulo-pagina">@ViewBag.Title</h3>
            </div>
            <div class="panel-body panelConteudo" id="panelBodyFixodivCenter">
                @Html.ValidationSummary(true)
                @Html.ValidationMessage("CustomError", new { id = "CustomError" })
                @Html.HiddenFor(model => model.TipoArquivo, new { id = "tipoArquivo" })
                @Html.HiddenFor(model => model.TipoSelecao)
                <div>
                    <div class="row" style="padding-bottom:2px">
                        <div id="divPeriodo" class="col-md-4">
                            <div class="panel panel-default" id="pnlData">
                                <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                    @Html.Label("Período", new { @class = "control-label label-sm" })
                                </div>
                                <div class="panel-body" style="padding-top:5px; padding-bottom:5px">
                                    <div class="row">

                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-md-5">
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => Model.InicioPeriodo, new { @class = "form-control input-sm MascDate datepickerpt", id = "InicioPeriodo" })
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-primary" id="btnDtInicio" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="col-md-1">
                                                    @Html.Label("a", new { @class = "label-sm" })
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="input-group input-group-sm">
                                                        @Html.TextBoxFor(model => Model.FimPeriodo, new { @class = "form-control input-sm MascDate datepickerpt", id = "FimPeriodo" })
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-primary" id="btnDtFim" type="button"><span class="glyphicon glyphicon-calendar"></span></button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                @Html.HiddenFor(model => model.Intervalo)
                                                @Html.ValidationMessageFor(model => model.Intervalo)
                                                @Html.ValidationMessageFor(model => Model.InicioPeriodo)
                                                @Html.ValidationMessageFor(model => Model.FimPeriodo)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div class="panel panel-default" id="pnlConsiderar">
                                <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                    @Html.Label("Considerar", new { @class = "control-label label-sm" })
                                </div>
                                <div class="panel-body" style="padding-top:5px; padding-bottom:5px">

                                    <div class="col-md-10">
                                        <div class="col-md-5">
                                            <div class="checkbox" style="padding-top: 5px; margin: 0">
                                                <label>
                                                    @Html.CheckBoxFor(model => model.bLimMaxHorasTrab, new { id = "bLimMaxHorasTrab", @class = "chbConsiderar" })
                                                    @Html.LabelFor(model => model.bLimMaxHorasTrab, new { @class = "control-label label-sm", @for = "bLimMaxHorasTrab" })
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="checkbox" style="padding-top: 5px; margin: 0">
                                                <label>
                                                    @Html.CheckBoxFor(model => model.bLimIntrajornada, new { id = "bLimIntrajornada", @class = "chbConsiderar" })
                                                    @Html.LabelFor(model => model.bLimIntrajornada, new { @class = "control-label label-sm", @for = "bLimIntrajornada" })
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="checkbox" style="padding-top: 5px; margin: 0">
                                                <label>
                                                    @Html.CheckBoxFor(model => model.bMinInterjornada, new { id = "bMinInterjornada", @class = "chbConsiderar" })
                                                    @Html.LabelFor(model => model.bMinInterjornada, new { @class = "control-label label-sm", @for = "bMinInterjornada" })
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.bLimMaxHorasTrab)
                                    @Html.ValidationMessageFor(model => model.bLimIntrajornada)
                                    @Html.ValidationMessageFor(model => model.bMinInterjornada)
                                </div>
                            </div>
                        </div>
                        @* Turno *@
                        <div class="col-md-3">
                            <div class="panel panel-default">
                                <div class="panel-heading" style="padding-top:2px; padding-bottom:0">
                                    @Html.Label("Agrupamento", new { @class = "control-label label-sm" })
                                </div>
                                <div class="panel-body" style="padding-top:5px; padding-bottom:5px">
                                    <div class="col-md-6">
                                        <div class="radio-inline" data-toggle="radio">
                                            @Html.RadioButtonFor(model => model.TipoTurno, 0, new { id = "idRadioDtaFunc", name = "rdio" })
                                            @Html.Label("lbDtaFunc", "Data/Funcionário", new { @class = "control-label label-sm", @for = "idRadioDtaFunc" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="radio-inline" data-toggle="radio">
                                            @Html.RadioButtonFor(model => model.TipoTurno, 1, new { id = "idRadioFuncDta", name = "rdio" })
                                            @Html.Label("lbFuncDta", "Funcionário/Data", new { @class = "control-label label-sm", @for = "idRadioDtaFunc" })
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        @Html.ValidationMessageFor(model => model.TipoTurno)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            @Html.HiddenFor(x => x.IdSelecionados)
                            @Html.ValidationMessageFor(x => x.IdSelecionados)
                            <div class="row">
                                @Html.GridFor("tbFuncionario", (new Modelo.Proxy.Relatorios.PxyGridRelatorioInconsistencias()).GetType(), true, "RelatorioInconsistencias", "DadosGrid")
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.Partial("../JobManager/JobView")
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-12 center-block">
                        <div style="text-align: right">
                            <button type="submit" id="btnPdf" class="btn btn-primary btnEnviar"><span class="fa fa-file-pdf-o"></span>&nbsp;Gerar PDF</button>
                            <button type="submit" id="btnXls" class="btn btn-primary btnEnviar"><span class="fa fa-file-excel-o"></span>&nbsp;Gerar Excel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    var errorArray = new Array();
    cwk_DataCalendario('#btnDtInicio', '#InicioPeriodo');
    cwk_DataCalendario('#btnDtFim', '#FimPeriodo');
    $(document).ready(function () {

        $('.datepickerpt').datepicker().on('hide', function (ev) {
            $("#pnlData").removeClass("panel-danger").removeClass("panel-success");
            $("#pnlData").addClass("panel-default");
            errorArray["Intervalo"] = null;
            $("form").validate().showErrors(errorArray);
            if ((this.id == "InicioPeriodo") && (($("#InicioPeriodo").val() != null && $("#InicioPeriodo").val() != "") && ($("#FimPeriodo").val() == null || $("#FimPeriodo").val() == ""))) {
                var inid = new Date(ev.date);
                endDate = new Date(ev.date);
                endDate.setDate(endDate.getDate() + 30);
                endDateString = ('0' + endDate.getDate()).slice(-2) + '/'
                    + ('0' + (endDate.getMonth() + 1)).slice(-2) + '/'
                    + endDate.getFullYear();
                $('#FimPeriodo').val(endDateString);
                $('#FimPeriodo').datepicker('update');
            }
            validaPeriodo(this);
        });

        $('#tbFuncionario tbody').on('click', 'tr', function () {
            errorArray["IdSelecionados"] = null;
            $("form").validate().showErrors(errorArray);
        });
    });

    $("#btnPdf").click(function (event) {
        if (!validaForm()) {
            event.preventDefault();
        }
        else {
            $("#tipoArquivo").val("PDF");

        }
    });

    $("#btnXls").click(function (event) {
        if (!validaForm()) {
            event.preventDefault();
        }
        else {
            $("#tipoArquivo").val("Excel");
            $('form').submit();
            event.preventDefault();
        }
    });

    $('form').submit(function () {
        if ($(this).valid()) {
            PostFormJob(this);
        }
        return false;
    });

    function validaForm() {
        var retorno = true;
        $("#IdSelecionados").val(GetSelecionados('tbFuncionario'));
        if ($("#IdSelecionados").val().length <= 0 || $("#IdSelecionados").val() == '' || $("#IdSelecionados").val() == null) {
            var msgErro = 'Para Imprimir o Relatório de Inconsistências é Necessário Selecionar Pelo Menos um Funcionário.';
            errorArray["IdSelecionados"] = msgErro;
            cwkErro(msgErro);
            $("form").validate().showErrors(errorArray);
            retorno = false;
        }
        else {
            errorArray["IdSelecionados"] = null;
            $("form").validate().showErrors(errorArray);
        }

        if (!validaPeriodo("", true)) {
            retorno = false;
        }

        if (!validaConsideracaoInconsistencia(true)) {
            retorno = false;
        }
        return retorno;
    }

    $(".chbConsiderar").change(function (e) {
        validaConsideracaoInconsistencia(false);
    });

    function validaConsideracaoInconsistencia(exibeAlerta) {
        if (exibeAlerta == undefined || exibeAlerta == "" || exibeAlerta == null) {
            exibeAlerta = false;
        }

        if (!$('input[name=bLimMaxHorasTrab]').is(":checked") && !$('input[name=bLimIntrajornada]').is(":checked") && !$('input[name=bMinInterjornada]').is(":checked")) {
            var msgErro = 'Para gerar o relatório é necessário selecionar pelo menos uma opção de inconsistência.';
            if (exibeAlerta) {
                cwkErro(msgErro);
            }
            errorArray["bLimMaxHorasTrab"] = msgErro;
            $("form").validate().showErrors(errorArray);
            $("#pnlConsiderar").removeClass("panel-default").removeClass("panel-success");
            $("#pnlConsiderar").addClass("panel-danger");
            return false;
        }
        else {
            errorArray["bLimMaxHorasTrab"] = null;
            $("form").validate().showErrors(errorArray);
            $("#pnlConsiderar").removeClass("panel-default").removeClass("panel-danger");
            $("#pnlConsiderar").addClass("panel-success");
            return true;
        }
    }

    function validaPeriodo(campo, exibeAlerta) {

        if (exibeAlerta == undefined || exibeAlerta == "" || exibeAlerta == null) {
            exibeAlerta = false;
        }

        if (($("#InicioPeriodo").val() != null && $("#InicioPeriodo").val() != "") && ($("#FimPeriodo").val() != null && $("#FimPeriodo").val() != "")) {
            var dias = diasPeriodo($("#InicioPeriodo").val(), $('#FimPeriodo').val());
            if (dias <= 0) {
                var msgErro = 'Data Inícial deve ser menor que a Final';
                if (exibeAlerta) {
                    cwkErro(msgErro);
                }
                errorArray["Intervalo"] = msgErro;
                $("form").validate().showErrors(errorArray);
                $("#pnlData").removeClass("panel-default").removeClass("panel-success");
                $("#pnlData").addClass("panel-danger");
                return false;
            }
            if (dias > 31) {
                var msgErro = 'O período não pode ser maior que 31 dias.';
                if (exibeAlerta) {
                    cwkErro(msgErro);
                }
                errorArray["Intervalo"] = msgErro;
                $("form").validate().showErrors(errorArray);
                $("#pnlData").removeClass("panel-default").removeClass("panel-success");
                $("#pnlData").addClass("panel-danger");
                return false;
            }
            else {
                $("#pnlData").removeClass("panel-default").removeClass("panel-danger");
                $("#pnlData").addClass("panel-success");
                return true;
            }

        }
        else {
            if (($("#InicioPeriodo").val() == null || $("#InicioPeriodo").val() == "") && ($("#FimPeriodo").val() == null || $("#FimPeriodo").val() == "")) {
                errorArray["Intervalo"] = 'A Data Inicial e Final devem ser preenchidas!';
                $("#InicioPeriodo").focus();
            }
            else {

                if ($("#InicioPeriodo").val() == null || $("#InicioPeriodo").val() == "") {
                    errorArray["Intervalo"] = 'A Data Inicial deve ser preenchida!';
                    $("#InicioPeriodo").focus();
                }
                if ($("#FimPeriodo").val() == null || $("#FimPeriodo").val() == "") {
                    errorArray["Intervalo"] = 'A Data Final deve ser preenchida!';
                    $("#FimPeriodo").focus();
                }
            }

            $("form").validate().showErrors(errorArray);
            $("#pnlData").removeClass("panel-default").removeClass("panel-success");
            $("#pnlData").addClass("panel-danger");
            return false;
        }
    }

</script>
